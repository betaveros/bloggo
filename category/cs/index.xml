<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cs on Bounded-Error Log</title>
    <link>//blog.vero.site/category/cs</link>
    <description>Recent content in Cs on Bounded-Error Log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Nov 2017 00:00:00 -0500</lastBuildDate>
    
	<atom:link href="//blog.vero.site/category/cs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sakura</title>
      <link>//blog.vero.site/post/sakura</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 -0500</pubDate>
      
      <guid>//blog.vero.site/post/sakura</guid>
      <description>&lt;p&gt;(Okay, this post is backdated.)&lt;/p&gt;
&lt;p&gt;Disassembling the executable produces a huge amount of code. There are some basic obfuscations like a lot of trivial identity functions nested in each other, and a few functions that wrap around identity functions but just add some constant multiple of 16. Most of the meat is in one very large function, though. If you disassemble this function with IDA, you see a lot of variable initializations and then a lot of interesting loops that are quite similar:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Thoroughly Stripped</title>
      <link>//blog.vero.site/post/thoroughly-stripped</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 -0500</pubDate>
      
      <guid>//blog.vero.site/post/thoroughly-stripped</guid>
      <description>&lt;p&gt;Woo, first CTF writeup. I got the opportunity to participate in the 2017 CSAW CTF finals with Don’t Hack Alone.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dumped by my core, left to bleed out bytes on the heap, I was stripped of my dignity… The last thing I could do was to let other programs strip me of my null-bytes just so my memory could live on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are provided with a core dump. Examining the flavor-text and the dump, we notice that the dump has no null bytes; we conjecture that they have been stripped out.&lt;/p&gt;
&lt;p&gt;Next, we examine the hexdump and look for any clues. There are a bunch of ASCII strings, but they look like normal debugging symbols. One thing that jumps out is that there are a couple fairly convincing regular striped patterns that become vertically aligned if you display 20 bytes in each line. Once we do that, we notice the following section. (This dump is from &lt;a href=&#34;https://github.com/betaveros/xxb&#34;&gt;&lt;code&gt;xxb&lt;/code&gt;&lt;/a&gt; but &lt;code&gt;xxd -c 20 thoroughlyStripped&lt;/code&gt; is quite sufficient.)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>020315040524</title>
      <link>//blog.vero.site/post/bcodex</link>
      <pubDate>Mon, 08 Aug 2016 13:54:22 +0800</pubDate>
      
      <guid>//blog.vero.site/post/bcodex</guid>
      <description>&lt;p&gt;&lt;code&gtlt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Puzzle 46 / Fillomino [LITS &#43; Extra Region &#43; Walls &#43; Anti-Walls &#43; Inequality &#43; Tapa &#43; Masyu]</title>
      <link>//blog.vero.site/post/puzzle-46</link>
      <pubDate>Sun, 29 Mar 2015 13:01:08 +0800</pubDate>
      
      <guid>//blog.vero.site/post/puzzle-46</guid>
      <description>&lt;blockquote&gt;
5:27 PM &lt;strong&gt;phenomist&lt;/strong&gt;: do you use gridderface to make pretty puzzles?&lt;br /&gt;
…&lt;br /&gt;
5:52 PM &lt;strong&gt;phenomist&lt;/strong&gt;: actually nvm excel is probably easier lol
&lt;/blockquote&gt;
&lt;p&gt;Okay I’m sorry this is a horrible puzzle where the rules don’t make sense and I didn’t even get it testsolved. I just wanted an image to concisely demonstrate the capabilities of &lt;a href=&#34;https://github.com/betaveros/gridderface&#34;&gt;gridderface&lt;/a&gt;, my puzzle marking and creation program, for the project homepage, after somebody expressed interest in using the program to write a puzzle. Then I got tremendously carried away.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; to D</title>
      <link>//blog.vero.site/post/c-to-d</link>
      <pubDate>Wed, 14 Jan 2015 00:00:00 +0800</pubDate>
      
      <guid>//blog.vero.site/post/c-to-d</guid>
      <description>&lt;p&gt;Some notes.&lt;/p&gt;
&lt;p&gt;I’m assuming you want to use D largely, but not entirely, for competitive programming. That’s me right now.&lt;/p&gt;
&lt;h3 id=&#34;basics&#34;&gt;Basics&lt;/h3&gt;
&lt;p&gt;Syntax is very similar. Function definitions, semicolon-terminated statements, variable declarations, and so on. You can declare &lt;code&gt;int main() {...}&lt;/code&gt; or &lt;code&gt;void main() {...}&lt;/code&gt; or something with arguments.&lt;/p&gt;
&lt;p&gt;Basic types like &lt;code&gt;bool&lt;/code&gt; and &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;double&lt;/code&gt; are all there. Wonderfully, &lt;code&gt;long&lt;/code&gt; is 64 bits. Instead of &lt;code&gt;unsigned&lt;/code&gt; whatever, just prefix a &lt;code&gt;u&lt;/code&gt;, e.g. &lt;code&gt;uint&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Arithmetic operators and bit operators are all there too, including unsigned right shift &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;. Although &lt;code&gt;^&lt;/code&gt; is still xor, D has exponentiation as &lt;code&gt;^^&lt;/code&gt;. Sadly, &lt;code&gt;%&lt;/code&gt; is still same-sign remainder; there’s no true mod.&lt;/p&gt;
&lt;pre class=&#34;sourceCode d&#34;&gt;&lt;code class=&#34;sourceCode d&#34;&gt;&lt;div class=&#34;sourceLine&#34; id=&#34;1&#34; href=&#34;#1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; std.stdio;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Casts look like &lt;code&gt;cast(int) x;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;control-flow&#34;&gt;Control Flow&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, and even &lt;code&gt;switch&lt;/code&gt; all work as you’d expect, along with &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;foreach&lt;/code&gt; is the nice addition though. Not only can you iterate over arrays and stuff, but range loops go like:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HOJ 226: CP (中)</title>
      <link>//blog.vero.site/post/hoj-cp</link>
      <pubDate>Mon, 15 Dec 2014 00:00:00 +0800</pubDate>
      
      <guid>//blog.vero.site/post/hoj-cp</guid>
      <description>&lt;p&gt;This post was written in Traditional Mandarin Chinese for my fellow competitive programmers in Taiwan.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://hoj.twbbs.org/judge/problem/view/226&#34;&gt;題目在這裡，HOJ 226&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有關的題目出現於NPSC 2014 高中組決賽pD。&lt;/p&gt;
&lt;p&gt;前置要求：treap (split, merge)跟在上面實作區段操作（請參考資訊枝幹）。&lt;/p&gt;
&lt;p&gt;這裡沒有完整的解答code，因為AC是要用血汗換來的才值得 :-)&lt;/p&gt;
&lt;h2 id=&#34;treap&#34;&gt;Treap&lt;/h2&gt;
&lt;p&gt;我討厭單字母&lt;code&gt;l&lt;/code&gt;的變數名稱（跟&lt;code&gt;1&lt;/code&gt;太像了。我沒有被這個雷過，這只是自己對自己程式碼可讀性的要求），所以我的子樹叫做&lt;code&gt;lc&lt;/code&gt;(left child)，&lt;code&gt;rc&lt;/code&gt;(right child)。&lt;/p&gt;
&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;div class=&#34;sourceLine&#34; id=&#34;1&#34; href=&#34;#1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; Treap {&lt;/div&gt;
&lt;div class=&#34;sourceLine&#34; id=&#34;2&#34; href=&#34;#2&#34; data-line-number=&#34;2&#34;&gt;    Treap * lc;&lt;/div&gt;
&lt;div class=&#34;sourceLine&#34; id=&#34;3&#34; href=&#34;#3&#34; data-line-number=&#34;3&#34;&gt;    Treap * rc;&lt;/div&gt;
&lt;div class=&#34;sourceLine&#34; id=&#34;4&#34; href=&#34;#4&#34; data-line-number=&#34;4&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;unsigned&lt;/span&gt; pri;&lt;/div&gt;
&lt;div class=&#34;sourceLine&#34; id=&#34;5&#34; href=&#34;#5&#34; data-line-number=&#34;5&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;char&lt;/span&gt; val;&lt;/div&gt;
&lt;div class=&#34;sourceLine&#34; id=&#34;6&#34; href=&#34;#6&#34; data-line-number=&#34;6&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; size;&lt;/div&gt;
&lt;div class=&#34;sourceLine&#34; id=&#34;7&#34; href=&#34;#7&#34; data-line-number=&#34;7&#34;&gt;};&lt;/div&gt;
&lt;div class=&#34;sourceLine&#34; id=&#34;8&#34; href=&#34;#8&#34; data-line-number=&#34;8&#34;&gt;&lt;/div&gt;
&lt;div class=&#34;sourceLine&#34; id=&#34;9&#34; href=&#34;#9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; size(Treap * a) { &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; a ? a-&amp;gt;size : &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;; }&lt;/div&gt;
&lt;div class=&#34;sourceLine&#34; id=&#34;10&#34; href=&#34;#10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; pull(Treap * a) {&lt;/div&gt;
&lt;div class=&#34;sourceLine&#34; id=&#34;11&#34; href=&#34;#11&#34; data-line-number=&#34;11&#34;&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (a) a-&amp;gt;size = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; + size(a-&amp;gt;lc) + size(a-&amp;gt;rc);&lt;/div&gt;
&lt;div class=&#34;sourceLine&#34; id=&#34;12&#34; href=&#34;#12&#34; data-line-number=&#34;12&#34;&gt;}&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gridderface 0.5</title>
      <link>//blog.vero.site/post/gridderface-0-5</link>
      <pubDate>Tue, 27 Nov 2012 17:53:13 +0800</pubDate>
      
      <guid>//blog.vero.site/post/gridderface-0-5</guid>
      <description>Okay, I give up. Here it is: Gridderface is a (quoting the project description, which I wrote anyway so whatever) “keyboard inferface for marking grid-based puzzles in Java” that I’ve been working on for too long. It is open-source under the GPL v3.
Basically, it’s a thing you can paste logic puzzle images into to solve them in, like people do in Paint, when you can’t or don’t want to print them.</description>
    </item>
    
    <item>
      <title>Haskell Stash</title>
      <link>//blog.vero.site/ref/hs</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//blog.vero.site/ref/hs</guid>
      <description>Installation Notes Personal list of Hackage packages to install, in approximate decreasing order of priority.
In Haskell Platform Changelog (in case there was any doubt)
GHC notably has array, bytestring, template-haskell, transformers.
Additional libraries notably include attoparsec, HTTP, HUnit, mtl, parsec, QuickCheck, text, vector.
Still, come to think of it, these libraries may well have updated since the platform release…
I’m too lazy to reinstall all of them, so here are the ones I recognize that I care about, minus containers because it mysteriously threatens to break ghc-7.</description>
    </item>
    
    <item>
      <title>Java Clipboards and Data Transfer</title>
      <link>//blog.vero.site/ref/java-clipboards</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//blog.vero.site/ref/java-clipboards</guid>
      <description>(Ported from betaveros.stash. Wow, I get syntax highlighting and footnotes!)
A quick brief guide. At least, that’s how I planned it.
A lot of stuff is in the package java.awt.datatransfer. Class Toolkit is in java.awt.
Some basic classes. The class Clipboard is a clipboard, obviously. Its content is/will be an instance of the class Transferable. Some content can be read as different types of objects depending on what you want; to choose which type you use an instance of DataFlavor.</description>
    </item>
    
    <item>
      <title>Stash</title>
      <link>//blog.vero.site/ref/stash</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//blog.vero.site/ref/stash</guid>
      <description>rustc -C prefer-dynamic .meter-text { white-space: pre-wrap; } launchctl stop com.apple.pboard launchctl start com.apple.pboard # requires ImageMagick functionimg() { identify -format &amp;#39;&amp;lt;img src=&amp;quot;%f&amp;quot; width=&amp;quot;%w&amp;quot; height=&amp;quot;%h&amp;quot; /&amp;gt;&amp;#39; $1 } :%s/\%xa0/ /ge :%s/\%u2019/&amp;#39;/ge :%s/\%u201c/&amp;quot;/ge :%s/\%u201d/&amp;quot;/ge ifconfig en0 | grep ether sudo ifconfig en1 ether 12:34:56:78:9a:bc while [[ $(date +%Y) -ne 2015]];do figlet $(($(date -j 0101000015 +%s)-$(date +%s)));sleep 1;clear;done;figlet Happy New Year! javascript:(function(x){function%20f(n){return%20Math.round(n*1000)/1000;}alert(&amp;quot;HP:%20&amp;quot;+f(x.hp)+&amp;quot;\nMP:%20&amp;quot;+f(x.mp)+&amp;quot;\nEXP:%20&amp;quot;+f(x.exp)+&amp;quot;\nGP:%20&amp;quot;+f(x.gp));}(angular.element(document.querySelector(&amp;#39;.hero-stats&amp;#39;)).scope().user.stats)); alias kd=&amp;#39;ruby --external-encoding UTF-8 -S kramdown&amp;#39; alias please=&amp;quot;sudo&amp;quot; sage: R = PolynomialRing(QQ, &amp;#39;x&amp;#39;) sage: f = R.</description>
    </item>
    
    <item>
      <title>init</title>
      <link>//blog.vero.site/ref/init</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//blog.vero.site/ref/init</guid>
      <description>1  Firefox  LeechBlock, Xmarks, HTTPS Everywhere, uBlock Origin Formerly: Pentadactyl (nightlies), LastPass, Disconnect, All-in-One Sidebar  Dropbox (db.tt) (g)Vim / MacVim  NeoBundle; jellybeans, syntastic, airline, fugitive, unite.vim, nerdtree, … Make sure you change your home folder and other paths in your .vimrc if necessary.  LaTeX VLC Anki Geogebra, CaRMetal osu! Gargoyle MuseScore μTorrent VeraCrypt Gyazo  h4xx0r Be aware of homebrew options.
 git (clone my stuff) fish_shell languages: haskell (stash), scala python things: beautifulsoup4, fn, ipython, numpy, pwntools, requests, scipy, virtualenv docs: kramdown, pandoc command-line: mu, fasd, ack / the_silver_searcher, openssl, tmux, ffmpeg, heroku, binutils, coreutils, tiny-fugue command-line more for fun: cowsay, figlet, cloc, sloccount idk: ant, go, ruby, rust  Mac  Use bottom-right of track pad for right-click; disable natural scrolling Set Caps Lock to Control In Mission Control &amp;gt; Hot Corners, set the lower-right corner to Mission Control  mkdir ~/bin ~/tmp</description>
    </item>
    
  </channel>
</rss>