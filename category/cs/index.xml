<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS on Bounded-Error Log</title>
    <link>//blog.vero.site/category/cs</link>
    <description>Recent content in CS on Bounded-Error Log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 Jul 2023 00:42:01 -0700</lastBuildDate><atom:link href="//blog.vero.site/category/cs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Yet Another Diceware-Style Word List</title>
      <link>//blog.vero.site/post/diceware</link>
      <pubDate>Sun, 23 Jul 2023 00:42:01 -0700</pubDate>
      
      <guid>//blog.vero.site/post/diceware</guid>
      <description>&lt;p&gt;Passwords. It’s 2023 and we still have to deal with them.&lt;/p&gt;
&lt;p&gt;Many people know that, per the &lt;a href=&#34;https://xkcd.com/936/&#34;&gt;canonical xkcd&lt;/a&gt;, sequences of randomly chosen words such as&lt;/p&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;span id=&#34;diceware-out&#34; style=&#34;font-size: 1.25rem&#34;&gt;soak-science-wander-pew-goldfish-xray-speed-consult&lt;/span&gt;&lt;br/&gt;&lt;button id=&#34;diceware-regen&#34; class=&#34;btn&#34; style=&#34;display: none&#34;&gt;regenerate&lt;/button&gt;&lt;small&gt; or &lt;a href=&#34;//blog.vero.site/misc/betaveros-diceware.txt&#34;&gt;get the list as .txt&lt;/a&gt; or a &lt;a href=&#34;//blog.vero.site/misc/betaveros-diceware.html&#34;&gt;standalone generator&lt;/a&gt;&lt;span id=&#34;diceware-msg&#34;&gt; (if my JavaScript were working the above would be a random password and you wouldn’t be seeing this message)&lt;/span&gt;&lt;/small&gt;
&lt;/div&gt;
&lt;script src=&#34;//blog.vero.site/js/diceware.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;make relatively memorable but hard-to-crack passwords. One popular strategy for randomly choosing words is Arnold Reinhold’s &lt;a href=&#34;https://theworld.com/~reinhold/diceware.html&#34;&gt;Diceware™&lt;/a&gt;, a list of 6&lt;sup&gt;5&lt;/sup&gt; = 7776 “words” that you can randomly sample from by rolling five dice (analog or digital). (I won’t go into topics like how to calculate the entropy of passwords and how long a password you should try to have here, since most Diceware overviews already discuss them at length.)&lt;/p&gt;
&lt;figure&gt;
&lt;a href=&#34;//blog.vero.site/img/dice.png&#34;&gt;&lt;img src=&#34;//blog.vero.site/img/dice.png&#34; alt=&#34;Five dice arranged in a V shape, digitally altered to be red&#34; /&gt;&lt;/a&gt;
&lt;figcaption&gt;
Somehow this image was already on my blog without being used in any post, but if there’s a post it belongs in, it’s surely this one
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;A few people have iterated on the concept since then: probably most notably, the Electronic Frontier Foundation published their own &lt;a href=&#34;https://www.eff.org/deeplinks/2016/07/new-wordlists-random-passphrases&#34;&gt;word list&lt;/a&gt; in 2016, with words chosen to be more well-known and memorable, at the cost of taking longer to type. I’m a fast typer and prefer the EFF’s wordlist over the original, and am very grateful to them for creating it, but after generating quite a few passwords with it over the last few years, I began to feel that it still had a lot of room for improvement.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Designing a Programming Language to Speedrun Advent of Code</title>
      <link>//blog.vero.site/post/noulith</link>
      <pubDate>Sun, 09 Apr 2023 14:42:52 -0700</pubDate>
      
      <guid>//blog.vero.site/post/noulith</guid>
      <description>&lt;div class=&#34;series&#34;&gt;
&lt;p&gt;“shouldn’t this have been published a few months ago?” yeah, probably. I even considered submitting it to the &lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/z9he28/advent_of_code_2022_mistiltoe_elfucation/&#34;&gt;AoC contest&lt;/a&gt;. time is a real beast.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The title is clickbait. I did not design and implement a programming language for the sole or even primary purpose of leaderboarding on Advent of Code. It just turned out that the programming language I was working on fit the task remarkably well.&lt;/p&gt;
&lt;p&gt;I can’t name just a single reason I started work on my language, &lt;a href=&#34;https://github.com/betaveros/noulith&#34;&gt;Noulith&lt;/a&gt;, back in July 2022, but I think the biggest one was even more absurdly niche: I solve and write a lot of &lt;a href=&#34;https://blog.vero.site/post/puzzlehunts&#34;&gt;puzzlehunts&lt;/a&gt;, and I wanted a better programming language to use to search word lists for words satisfying unusual constraints, such as, “Find all ten-letter words that contain each of the letters A, B, and C exactly once and that have the ninth letter K.”&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I have a folder of ten-line scripts of this kind, mostly Python, and I thought there was surely a better way to do this. Not necessarily faster — there is obviously no way I could &lt;a href=&#34;https://xkcd.com/1205/&#34;&gt;save time on net by optimizing this process&lt;/a&gt;. But, for example, I wanted to be able to easily share these programs such that others could run them. I had a positive experience in this with my slightly older golflang &lt;a href=&#34;https://github.com/betaveros/paradoc&#34;&gt;Paradoc&lt;/a&gt;, which I had compiled into a WASM blob and &lt;a href=&#34;https://betaveros.github.io/paradoc-rust/&#34;&gt;put online&lt;/a&gt; and, just once, experienced the convenience of sharing a &lt;a href=&#34;https://betaveros.github.io/paradoc-rust/#aVVje0FwcVdwfH1mV8OYKXNqIHI=&#34;&gt;short text processing program&lt;/a&gt; through a link. (Puzzle: what does this program do?) I also wanted to write and run these programs while booted into a different operating system, using a different computer, or just on my phone.&lt;/p&gt;
&lt;p&gt;As I worked on it, I kept accumulating reasons to keep going. There were other contexts where I wanted to quickly code a combinatorial brute force that was annoying to write in other languages; a glib phrasing is that I wanted access to Haskell’s list monad in a sloppier language. I also wanted an excuse to read &lt;a href=&#34;https://craftinginterpreters.com/&#34;&gt;&lt;cite&gt;Crafting Interpreters&lt;/cite&gt;&lt;/a&gt; more thoroughly. But sometimes I think the best characterization for what developing the language “felt like” was that I had been possessed by a supernatural creature — say, the dragon from the &lt;a href=&#34;https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools&#34;&gt;Dragon Book&lt;/a&gt;. I spent every spare minute thinking about language features and next implementation steps, because I had to.&lt;/p&gt;
&lt;p&gt;The first “real program” I wrote in Noulith was to brute force constructions for &lt;a href=&#34;https://2022.galacticpuzzlehunt.com/puzzle/the-cube&#34;&gt;The Cube&lt;/a&gt;, for last year’s Galactic Puzzle Hunt in early August, and it worked unexpectedly well. I wrote a &lt;code&gt;for&lt;/code&gt; loop with a 53-clause iteratee and the interpreter executed it smoothly. Eventually I realized that the language could expand into other niches in my life where I wanted a scripting language. For example, I did a few &lt;a href=&#34;https://www.cryptopals.com/&#34;&gt;Cryptopals challenges&lt;/a&gt; in them. It would take a month or two before it dawned on me that the same compulsion that drove me to create this language would drive me to do Advent of Code in it. That’s just how it has to be.&lt;/p&gt;
&lt;p&gt;This post details my thought process behind the design of this language. Some preliminary notes:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introduction to Code Golf and Golflangs</title>
      <link>//blog.vero.site/post/golf</link>
      <pubDate>Thu, 22 Dec 2022 15:46:26 -0800</pubDate>
      
      <guid>//blog.vero.site/post/golf</guid>
      <description>&lt;p&gt;Code golf is the recreational activity&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; of trying to write programs that are as short as possible.&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Golfed programs still have to be correct, but brevity is prioritized above every other concern — e.g., robustness, performance, or legibility — which usually leads to really interesting code.&lt;/p&gt;
&lt;p&gt;I think code golf is a lot of fun (although I think a lot of things are fun, so it’s one of those hobbies that I get really into roughly one month every year and then completely forget about for the remaining eleven). I wanted to write an introduction because I don’t know of any good general introductions to code golf, particularly ones that try to be language-agnostic and that cover the fascinating world of &lt;em&gt;programming languages designed specifically for code golf&lt;/em&gt;, which I’ll call golflangs for short. But more on that later.&lt;/p&gt;
&lt;p&gt;Note: If you are the kind of person who prefers to just dive in and try golfing some code without guidance, you should skip to the &lt;a href=&#34;#code-golf-sites&#34;&gt;code golf sites&lt;/a&gt; section.&lt;/p&gt;
&lt;h3 id=&#34;a-simple-example&#34;&gt;A simple example&lt;/h3&gt;
&lt;p&gt;Of course, there’s a reason most code golf tutorials focus on a single language: most code golf techniques are language-specific. The Code Golf &amp;amp; Coding Challenges (CGCC) StackExchange community has a list of some &lt;a href=&#34;https://codegolf.stackexchange.com/questions/5285/tips-for-golfing-in-all-languages&#34;&gt;golfing tips that apply to most languages&lt;/a&gt;, but there are far more tricks in just about any language-specific list, and most of the intrigue lies in knowing the language you’re golfing well. So to provide a taste of the code golf experience, let’s golf a simple problem, Anarchy Golf’s &lt;a href=&#34;http://golf.shinh.org/p.rb?Factorial&#34;&gt;Factorial&lt;/a&gt;, in Python.&lt;/p&gt;
&lt;p&gt;In this problem, we have to read a series of positive integers from standard input, one per line, and output the factorial of each, also one per line. Here’s a stab at a simple, direct implementation with no golfing at all:&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode python&#34;&gt;&lt;code class=&#34;sourceCode python&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; factorial(n):&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; n &lt;span class=&#34;op&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;: &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; n &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; factorial(n&lt;span class=&#34;dv&#34;&gt;-1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;cf&#34;&gt;try&lt;/span&gt;:&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;True&lt;/span&gt;:&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;        &lt;span class=&#34;bu&#34;&gt;print&lt;/span&gt;(factorial(&lt;span class=&#34;bu&#34;&gt;int&lt;/span&gt;(&lt;span class=&#34;bu&#34;&gt;input&lt;/span&gt;())))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;cf&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;pp&#34;&gt;EOFError&lt;/span&gt;:&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;cf&#34;&gt;pass&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Flexbox Fun Facts</title>
      <link>//blog.vero.site/post/flexbox-fun</link>
      <pubDate>Fri, 23 Sep 2022 21:33:22 -0700</pubDate>
      
      <guid>//blog.vero.site/post/flexbox-fun</guid>
      <description>&lt;p&gt;This post is brought to you by “I am procrastinating other stuff by doing some long overdue maintenance on my blog”. Mainly, I finally replaced the old &lt;code&gt;float&lt;/code&gt;-based layout from the random Hugo theme I forked, which I had been keeping just because it wasn’t broken, with flexbox, so that I could more easily tweak some other things. If things look broken, you may need to force-refresh or clear your cache, and on the off chance things look mostly the same but you feel like something about the layout feels subtly different, that’s what’s up.&lt;/p&gt;
&lt;p&gt;While making these changes, I ended up digging through the &lt;a href=&#34;https://www.w3.org/TR/2018/CR-css-flexbox-1-20181119/&#34;&gt;flexbox spec&lt;/a&gt; to debug an issue and learned some interesting things. (This and other links in this post are permalinks to the November 2018 spec, which I believe is the most recent official version as of time of writing, but it’s nearly three years and there have been quite a few changes in the “editor’s draft”. Also, this post is not a flexbox tutorial and will not make sense if you are already familiar with flexbox.)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>🅿️🅿️🅿️ordle</title>
      <link>//blog.vero.site/post/pppordle</link>
      <pubDate>Mon, 04 Jul 2022 23:54:44 -0700</pubDate>
      
      <guid>//blog.vero.site/post/pppordle</guid>
      <description>&lt;p&gt;Don’t you hate it when CTFs happen faster than you can write them up? This is probably the only PlaidCTF challenge I get to, unfortunately.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Web is out, retro is in. Play your favorite word game from the comfort of your terminal!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It’s a terminal Wordle client!&lt;/p&gt;
&lt;figure&gt;
&lt;a href=&#34;//blog.vero.site/img/pppordle-1.png&#34;&gt;&lt;img src=&#34;//blog.vero.site/img/pppordle-1.png&#34; alt=&#34;Screenshot of a terminal Wordle client. The puzzle has been solved with the answer COZEY.&#34; /&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;p&gt;I only solved the first half of this challenge. The two halves seem to be unrelated though. (Nobody solved the second half during the CTF.) The challenge was quite big code-wise, with more than a dozen files, so it’s hard to replicate the experience in a post like this, but here’s an attempt.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mask</title>
      <link>//blog.vero.site/post/mask</link>
      <pubDate>Mon, 04 Jul 2022 23:54:33 -0700</pubDate>
      
      <guid>//blog.vero.site/post/mask</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Don’t forget to wear your mask…&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nc challs.actf.co 31501&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If I had a nickel for every &lt;a href=&#34;//blog.vero.site/post/messy-desk&#34;&gt;CTF challenge I’ve done&lt;/a&gt; that involves understanding the internal structure of a QR code, I would have two nickels. Which isn’t a lot, etc etc. That previous challenge probably helped me get first blood on this.&lt;/p&gt;
&lt;p&gt;The source code is wonderfully short:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode python&#34;&gt;&lt;code class=&#34;sourceCode python&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;im&#34;&gt;import&lt;/span&gt; io, qrcode, string&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;flag_contents &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; [REDACTED]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;cf&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;all&lt;/span&gt;(i &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; string.ascii_lowercase &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; flag_contents)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;flag &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; b&lt;span class=&#34;st&#34;&gt;&amp;quot;actf{&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; flag_contents.encode() &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; b&lt;span class=&#34;st&#34;&gt;&amp;quot;}&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;bu&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;flag is &lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; characters&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;len&lt;/span&gt;(flag))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;qr &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; qrcode.QRCode(version&lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, error_correction &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; qrcode.constants.ERROR_CORRECT_L, box_size&lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, border&lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;:&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;    &lt;span class=&#34;cf&#34;&gt;try&lt;/span&gt;:&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;        inp &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;bytes&lt;/span&gt;.fromhex(&lt;span class=&#34;bu&#34;&gt;input&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;give input (in hex): &amp;quot;&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;        &lt;span class=&#34;cf&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;len&lt;/span&gt;(inp) &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;len&lt;/span&gt;(flag)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;    &lt;span class=&#34;cf&#34;&gt;except&lt;/span&gt;:&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;        &lt;span class=&#34;bu&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;bad input, exiting&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; title=&#34;16&#34;&gt;        &lt;span class=&#34;cf&#34;&gt;break&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; title=&#34;17&#34;&gt;    qr.clear()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; title=&#34;18&#34;&gt;    qr.add_data(&lt;span class=&#34;bu&#34;&gt;bytes&lt;/span&gt;([i&lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;j &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; i,j &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;zip&lt;/span&gt;(inp, flag)]))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; title=&#34;19&#34;&gt;    f &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; io.StringIO()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; title=&#34;20&#34;&gt;    qr.print_ascii(out&lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;f)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; title=&#34;21&#34;&gt;    f.seek(&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; title=&#34;22&#34;&gt;    &lt;span class=&#34;bu&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;&lt;/span&gt;.join(i[:&lt;span class=&#34;dv&#34;&gt;11&lt;/span&gt;] &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; f))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Kevin Higgs</title>
      <link>//blog.vero.site/post/kevin-higgs</link>
      <pubDate>Mon, 04 Jul 2022 23:54:23 -0700</pubDate>
      
      <guid>//blog.vero.site/post/kevin-higgs</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Now that kmh is gone, clam’s been going through pickle withdrawal. To help him cope, he wrote his own pickle pyjail. It’s nothing like kmh’s, but maybe it’s enough.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Language jails are rapidly becoming one of my CTF areas of expertise. Not sure how I feel about that.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode python&#34;&gt;&lt;code class=&#34;sourceCode python&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;#!/usr/local/bin/python3&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;im&#34;&gt;import&lt;/span&gt; pickle&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;im&#34;&gt;import&lt;/span&gt; io&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;im&#34;&gt;import&lt;/span&gt; sys&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;module &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;type&lt;/span&gt;(__builtins__)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;empty &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; module(&lt;span class=&#34;st&#34;&gt;&amp;quot;empty&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;empty.empty &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; empty&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;sys.modules[&lt;span class=&#34;st&#34;&gt;&amp;quot;empty&amp;quot;&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; empty&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; SafeUnpickler(pickle.Unpickler):&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; find_class(&lt;span class=&#34;va&#34;&gt;self&lt;/span&gt;, module, name):&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; module &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;empty&amp;quot;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;and&lt;/span&gt; name.count(&lt;span class=&#34;st&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;:&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; title=&#34;16&#34;&gt;            &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;super&lt;/span&gt;().find_class(module, name)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; title=&#34;17&#34;&gt;        &lt;span class=&#34;cf&#34;&gt;raise&lt;/span&gt; pickle.UnpicklingError(&lt;span class=&#34;st&#34;&gt;&amp;quot;e-legal&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; title=&#34;19&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; title=&#34;20&#34;&gt;lepickle &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;bytes&lt;/span&gt;.fromhex(&lt;span class=&#34;bu&#34;&gt;input&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;Enter hex-encoded pickle: &amp;quot;&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; title=&#34;21&#34;&gt;&lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;len&lt;/span&gt;(lepickle) &lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;400&lt;/span&gt;:&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; title=&#34;22&#34;&gt;    &lt;span class=&#34;bu&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;your pickle is too large for my taste &amp;gt;:(&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; title=&#34;23&#34;&gt;&lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;:&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; title=&#34;24&#34;&gt;    SafeUnpickler(io.BytesIO(lepickle)).load()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;https://docs.python.org/3/library/pickle.html&#34;&gt;pickle&lt;/a&gt;&lt;/code&gt; is a Python object serialization format. As the docs page loudly proclaims, it is not secure. Roughly the simplest possible code to pop a shell (adapted from &lt;a href=&#34;https://davidhamann.de/2020/04/05/exploiting-python-pickle/&#34;&gt;David Hamann&lt;/a&gt;, who constructs a more realistic RCE) looks like:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CaaSio PSE</title>
      <link>//blog.vero.site/post/caasio</link>
      <pubDate>Mon, 04 Jul 2022 23:54:13 -0700</pubDate>
      
      <guid>//blog.vero.site/post/caasio</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;It’s clam’s newest javascript Calculator-as-a-Service: the CaaSio Please Stop Edition! no but actually please stop I hate jsjails js isn’t a good language stop putting one in every ctf I don’t want to look at another jsjail because if I do I might vomit from how much I hate js and js quirks aren’t even cool or funny or quirky they’re just painful because why would you design a language like this ahhhhhhhhhhhhhhhhhhhhh&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It’s just a JavaScript eval jail.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode js&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;#!/usr/local/bin/node&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;// flag in ./flag.txt&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; vm &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;vm&amp;quot;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; readline &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;readline&amp;quot;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;readline&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;createInterface&lt;/span&gt;(&lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;process&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;stdin&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;process&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;question&lt;/span&gt;(&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;    &lt;span class=&#34;st&#34;&gt;&amp;quot;Welcome to CaaSio: Please Stop Edition! Enter your calculation:&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; (input) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; title=&#34;16&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;close&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; title=&#34;17&#34;&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; title=&#34;18&#34;&gt;            &lt;span class=&#34;va&#34;&gt;input&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;215&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; title=&#34;19&#34;&gt;            &lt;span class=&#34;ss&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;^[\x20-\x7e]+$&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;/&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;test&lt;/span&gt;(input) &lt;span class=&#34;op&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; title=&#34;20&#34;&gt;            &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;[.\[\]{}\s;`&amp;#39;&amp;quot;\\_&amp;lt;&amp;gt;?:]&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;/&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;test&lt;/span&gt;(input) &lt;span class=&#34;op&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; title=&#34;21&#34;&gt;            &lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;va&#34;&gt;input&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;toLowerCase&lt;/span&gt;().&lt;span class=&#34;at&#34;&gt;includes&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;import&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; title=&#34;22&#34;&gt;        ) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; title=&#34;23&#34;&gt;            &lt;span class=&#34;cf&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; title=&#34;24&#34;&gt;                &lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; val &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;vm&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;runInNewContext&lt;/span&gt;(input&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{}&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-25&#34; title=&#34;25&#34;&gt;                &lt;span class=&#34;va&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;Result:&amp;quot;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-26&#34; title=&#34;26&#34;&gt;                &lt;span class=&#34;va&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;log&lt;/span&gt;(val)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-27&#34; title=&#34;27&#34;&gt;                &lt;span class=&#34;va&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;log&lt;/span&gt;(&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-28&#34; title=&#34;28&#34;&gt;                    &lt;span class=&#34;st&#34;&gt;&amp;quot;See, isn&amp;#39;t the calculator so much nicer when you&amp;#39;re not trying to hack it?&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-29&#34; title=&#34;29&#34;&gt;                )&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-30&#34; title=&#34;30&#34;&gt;            &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;catch&lt;/span&gt; (e) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-31&#34; title=&#34;31&#34;&gt;                &lt;span class=&#34;va&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;your tried&amp;quot;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-32&#34; title=&#34;32&#34;&gt;            &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-33&#34; title=&#34;33&#34;&gt;        &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-34&#34; title=&#34;34&#34;&gt;            &lt;span class=&#34;va&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;log&lt;/span&gt;(&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-35&#34; title=&#34;35&#34;&gt;                &lt;span class=&#34;st&#34;&gt;&amp;quot;Third time really is the charm! I&amp;#39;ve finally created an unhackable system!&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-36&#34; title=&#34;36&#34;&gt;            )&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-37&#34; title=&#34;37&#34;&gt;        &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-38&#34; title=&#34;38&#34;&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-39&#34; title=&#34;39&#34;&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Interpreting Some Toy Neural Networks</title>
      <link>//blog.vero.site/post/interpret</link>
      <pubDate>Thu, 05 May 2022 23:26:13 -0700</pubDate>
      
      <guid>//blog.vero.site/post/interpret</guid>
      <description>&lt;p&gt;I participated in the &lt;a href=&#34;https://www.eacambridge.org/agi-safety-fundamentals&#34;&gt;AGI Safety Fundamentals&lt;/a&gt; program recently. The program concludes with a flexible final project, with the default suggestion of “a piece of writing, roughly the length and scope of a typical blog post”, so naturally, I deleted all but the last two words and here we are.&lt;/p&gt;
&lt;p&gt;When I previously considered machine learning as a field of study, I came away with an impression that most effort and computation power was going into training bigger, more powerful models; whereas the inner workings of the models themselves, not to mention questions like why certain architectures or design choices work better than others, remained inscrutable and understudied. This impression always bothered me, and it definitely influenced me away from going into AI as a career. Of course, there are important, objective safety concerns around developing and designing models we don’t understand, many of which we discussed in the program; but my discomfort is mostly a completely unrelated nagging feeling I get whenever I’m relying on things I don’t understand.&lt;/p&gt;
&lt;p&gt;After the program and all the concurrent developments in AI (including &lt;a href=&#34;https://www.deepmind.com/blog/competitive-programming-with-alphacode&#34;&gt;AlphaCode&lt;/a&gt;, OpenAI’s &lt;a href=&#34;https://openai.com/blog/formal-math/&#34;&gt;math olympiad solver&lt;/a&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;, &lt;a href=&#34;https://say-can.github.io/&#34;&gt;SayCan&lt;/a&gt;, and, of course, &lt;a href=&#34;https://openai.com/dall-e-2/&#34;&gt;DALL-E 2&lt;/a&gt;), I still had this impression about the field at a very high level, but I also became more familiar with the subfield of &lt;em&gt;interpretability&lt;/em&gt; — designs and tools that allow us to understand and explain decisions by ML systems, rather than treating them as black-boxed mappings from inputs to outputs — and confirmed that enough people study it to make it a thing. One quote from a post on the &lt;a href=&#34;https://www.alignmentforum.org/posts/X2i9dQQK3gETCyqh2/chris-olah-s-views-on-agi-safety&#34;&gt;views of Chris Olah&lt;/a&gt;, noted interpretability researcher, captured my feeling particularly eloquently:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;interpretability is very aligned with traditional scientific virtues—which can be quite motivating for many people—even if it isn’t very aligned with the present paradigm of machine learning.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I found the whole post insightful, and it happens that the bits before that in the passage were also relevant to me. I don’t have access to lots of compute!&lt;/p&gt;
&lt;p&gt;Inspired by that post and by a desire to actually write some code (which I figured might help me understand the inner workings of modern ML systems in a different sense), and after abandoning a few other project ideas that were far too ambitious, I decided to go through some parts of the &lt;a href=&#34;https://course.fast.ai/&#34;&gt;fast.ai tutorial&lt;/a&gt; and riff on it to see how much progress I could make interpreting the models, and to write up the process in a blog post. I tried to capture my experience holistically, bugs and all, to serve as a data point for what it might feel like to start ML engineering (for the rare individuals with a background and inclinations just like mine&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;), and &lt;em&gt;maybe&lt;/em&gt; entertain more experienced practitioners or influence their future tutorial recommendations. A much lower-priority goal was trying to produce “my version of the tutorial”, which would draw more liberally from an undergraduate math education&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; and dive more deeply into technical details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TI-1337 Silver Edition</title>
      <link>//blog.vero.site/post/ti1337se</link>
      <pubDate>Mon, 14 Feb 2022 01:32:22 -0800</pubDate>
      
      <guid>//blog.vero.site/post/ti1337se</guid>
      <description>&lt;p&gt;Last weekend &lt;a href=&#34;https://galhacktictrendsetters.wordpress.com/&#34;&gt;Galhacktic Trendsetters&lt;/a&gt; sort of spontaneously decided to do &lt;a href=&#34;https://ctf.dicega.ng/&#34;&gt;DiceCTF 2022&lt;/a&gt;, months or years after most of us had done another CTF. It was a lot of fun and we placed 6th!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Back in the day the silver edition was the top of the line Texas Instruments calculator, but now the security is looking a little obsolete. Can you break it?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It’s yet another Python jail. We input a string and, after it makes it through a gauntlet of checks and processing, it gets &lt;code&gt;exec&lt;/code&gt;’d.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode python&#34;&gt;&lt;code class=&#34;sourceCode python&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;im&#34;&gt;import&lt;/span&gt; dis&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;im&#34;&gt;import&lt;/span&gt; sys&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;banned &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;MAKE_FUNCTION&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;CALL_FUNCTION&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;CALL_FUNCTION_KW&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;CALL_FUNCTION_EX&amp;quot;&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;used_gift &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; gift(target, name, value):&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;global&lt;/span&gt; used_gift&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; used_gift: sys.exit(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;    used_gift &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;    &lt;span class=&#34;bu&#34;&gt;setattr&lt;/span&gt;(target, name, value)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;&lt;span class=&#34;bu&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;Welcome to the TI-1337 Silver Edition. Enter your calculations below:&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; title=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; title=&#34;17&#34;&gt;math &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;input&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;gt; &amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; title=&#34;18&#34;&gt;&lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;len&lt;/span&gt;(math) &lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1337&lt;/span&gt;:&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; title=&#34;19&#34;&gt;    &lt;span class=&#34;bu&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;Nobody needs that much math!&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; title=&#34;20&#34;&gt;    sys.exit(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; title=&#34;21&#34;&gt;code &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;compile&lt;/span&gt;(math, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;lt;math&amp;gt;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;exec&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; title=&#34;23&#34;&gt;bytecode &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;list&lt;/span&gt;(code.co_code)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; title=&#34;24&#34;&gt;instructions &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;list&lt;/span&gt;(dis.get_instructions(code))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-25&#34; title=&#34;25&#34;&gt;&lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; i, inst &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;enumerate&lt;/span&gt;(instructions):&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-26&#34; title=&#34;26&#34;&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; inst.is_jump_target:&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-27&#34; title=&#34;27&#34;&gt;        &lt;span class=&#34;bu&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;Math doesn&amp;#39;t need control flow!&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-28&#34; title=&#34;28&#34;&gt;        sys.exit(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-29&#34; title=&#34;29&#34;&gt;    nextoffset &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; instructions[i&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;].offset &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; i&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;len&lt;/span&gt;(instructions) &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;len&lt;/span&gt;(bytecode)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-30&#34; title=&#34;30&#34;&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; inst.opname &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; banned:&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-31&#34; title=&#34;31&#34;&gt;        bytecode[inst.offset:instructions[i&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;].offset] &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;(instructions[i&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;].offset&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;inst.offset)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-32&#34; title=&#34;32&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-33&#34; title=&#34;33&#34;&gt;names &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;list&lt;/span&gt;(code.co_names)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-34&#34; title=&#34;34&#34;&gt;&lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; i, name &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;enumerate&lt;/span&gt;(code.co_names):&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-35&#34; title=&#34;35&#34;&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;__&amp;quot;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; name: names[i] &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;$INVALID$&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-36&#34; title=&#34;36&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-37&#34; title=&#34;37&#34;&gt;code &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; code.replace(co_code&lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bu&#34;&gt;bytes&lt;/span&gt;(b &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; b &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; bytecode &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;), co_names&lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bu&#34;&gt;tuple&lt;/span&gt;(names), co_stacksize&lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-38&#34; title=&#34;38&#34;&gt;v &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; {}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-39&#34; title=&#34;39&#34;&gt;&lt;span class=&#34;bu&#34;&gt;exec&lt;/span&gt;(code, {&lt;span class=&#34;st&#34;&gt;&amp;quot;__builtins__&amp;quot;&lt;/span&gt;: {&lt;span class=&#34;st&#34;&gt;&amp;quot;gift&amp;quot;&lt;/span&gt;: gift}}, v)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-40&#34; title=&#34;40&#34;&gt;&lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; v: &lt;span class=&#34;bu&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;.join(&lt;span class=&#34;ss&#34;&gt;f&amp;quot;&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;{&lt;/span&gt;name&lt;span class=&#34;sc&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt; = &lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;{&lt;/span&gt;val&lt;span class=&#34;sc&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; name, val &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; v.items()))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-41&#34; title=&#34;41&#34;&gt;&lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;: &lt;span class=&#34;bu&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;No results stored.&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More precisely, the gauntlet does the following:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>blazingfast</title>
      <link>//blog.vero.site/post/blazingfast</link>
      <pubDate>Mon, 14 Feb 2022 01:32:15 -0800</pubDate>
      
      <guid>//blog.vero.site/post/blazingfast</guid>
      <description>&lt;p&gt;Last weekend &lt;a href=&#34;https://galhacktictrendsetters.wordpress.com/&#34;&gt;Galhacktic Trendsetters&lt;/a&gt; sort of spontaneously decided to do &lt;a href=&#34;https://ctf.dicega.ng/&#34;&gt;DiceCTF 2022&lt;/a&gt;, months or years after most of us had done another CTF. It was a lot of fun and we placed 6th!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I made a blazing fast MoCkInG CaSe converter!&lt;/p&gt;
&lt;p&gt;blazingfast.mc.ax&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We’re presented with a website that converts text to AlTeRnAtInG CaSe. The core converter is written in WASM, and also checks that its input doesn’t have any of the characters &lt;code&gt;&amp;lt;&amp;gt;&amp;amp;&#34;&lt;/code&gt;. The JavaScript wrapper takes an input from the URL, converts it to uppercase, feeds it to the converter, and if the check passes, injects the output into an &lt;code&gt;innerHTML&lt;/code&gt;. The goal is to compose a URL that, when visited by an admin bot, leaks the flag from &lt;code&gt;localStorage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The converter is compiled from this C code:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode c&#34;&gt;&lt;code class=&#34;sourceCode c&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; length, ptr = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;char&lt;/span&gt; buf[&lt;span class=&#34;dv&#34;&gt;1000&lt;/span&gt;];&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; init(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; size) {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;    length = size;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;    ptr = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;dt&#34;&gt;char&lt;/span&gt; read() {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; buf[ptr++];&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; write(&lt;span class=&#34;dt&#34;&gt;char&lt;/span&gt; c) {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;    buf[ptr++] = c;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; title=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; title=&#34;17&#34;&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; mock() {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; title=&#34;18&#34;&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;; i &amp;lt; length; i ++) {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; title=&#34;19&#34;&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (i % &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; == &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; buf[i] &amp;gt;= &lt;span class=&#34;dv&#34;&gt;65&lt;/span&gt; &amp;amp;&amp;amp; buf[i] &amp;lt;= &lt;span class=&#34;dv&#34;&gt;90&lt;/span&gt;) {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; title=&#34;20&#34;&gt;            buf[i] += &lt;span class=&#34;dv&#34;&gt;32&lt;/span&gt;;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; title=&#34;21&#34;&gt;        }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; title=&#34;23&#34;&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (buf[i] == &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt; || buf[i] == &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt; || buf[i] == &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt; || buf[i] == &lt;span class=&#34;ch&#34;&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;) {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; title=&#34;24&#34;&gt;            &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-25&#34; title=&#34;25&#34;&gt;        }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-26&#34; title=&#34;26&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-27&#34; title=&#34;27&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-28&#34; title=&#34;28&#34;&gt;    ptr = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-29&#34; title=&#34;29&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-30&#34; title=&#34;30&#34;&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-31&#34; title=&#34;31&#34;&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>What Color Should My Discord Roles/Reactions Be?</title>
      <link>//blog.vero.site/post/discord-color</link>
      <pubDate>Mon, 28 Jun 2021 20:17:51 -0700</pubDate>
      
      <guid>//blog.vero.site/post/discord-color</guid>
      <description>&lt;p&gt;I subscribed to Discord Nitro a month ago, but only recently did I start thinking about the full range of powers the subscription granted me. I could create my own reactions, dump them in my personal server, and use them to react anywhere.&lt;/p&gt;
&lt;p&gt;However, when I finally started trying to create some reactions, I hit an interesting snag: Discord can be used in dark and light mode,&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; and a reaction will have the same color on both modes. If I wanted my reaction to be as clearly readable in both modes as possible, what color should I make it?&lt;/p&gt;
&lt;p&gt;(I could, of course, just outline my reaction with a contrasting color, but let’s say that’s cheating. With the limited space in a reaction, outlining isn’t that great of a solution anyway.)&lt;/p&gt;
&lt;p&gt;Now, one can’t &lt;em&gt;really&lt;/em&gt; just compute the “contrast of two colors” given only their RGB components; there’s no universally agreed-on definition of &lt;a href=&#34;https://en.wikipedia.org/wiki/Contrast_(vision)&#34;&gt;contrast in vision&lt;/a&gt;, and even if there were one, the contrast of two given colors would depend on the color space and possibly the viewer’s biology. But, to get a concrete answer to this question, we can use the standard sRGB model and the W3C’s definitions of &lt;a href=&#34;https://www.w3.org/TR/WCAG/#dfn-contrast-ratio&#34;&gt;contrast ratio&lt;/a&gt; and &lt;a href=&#34;https://www.w3.org/TR/WCAG/#dfn-relative-luminance&#34;&gt;relative luminance&lt;/a&gt;.&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; As of time of writing on my computer,&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; Discord reactions have background &lt;span style=&#34;padding:0.15em 0.4em;background-color:#2f3136;color:white&#34;&gt;#2f3136&lt;/span&gt; on dark mode and &lt;span style=&#34;padding:0.15em 0.4em;background-color:#f2f3f5&#34;&gt;#f2f3f5&lt;/span&gt; on light mode. Reactions you’ve reacted with have background &lt;span style=&#34;padding:0.15em 0.4em;background-color:#3b405a;color:white&#34;&gt;#3b405a&lt;/span&gt; on dark mode and &lt;span style=&#34;padding:0.15em 0.4em;background-color:#e7e9fd&#34;&gt;#e7e9fd&lt;/span&gt; on light mode. Because the dark mode background gets lighter and the light mode background gets darker, we’ll use the latter colors so we’re optimizing the worst-case contrast.&lt;/p&gt;
&lt;p&gt;There are smarter approaches, but the 256&lt;sup&gt;3&lt;/sup&gt; = 16,777,216 possible 8-bit colors are perfectly feasible to brute force, so I wrote a short Python script to check all of them, which is at the bottom of this post. Under the parameters I’ve outlined, the optimal color for a Discord reaction is &lt;span style=&#34;padding:0.15em 0.4em;background-color:#ff4103&#34;&gt;rgb(255, 65, 3) or #ff4103.&lt;/span&gt; A demo:&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td style=&#34;background-color:#3b405a;color:#ff4103&#34;&gt;
#ff4103 &lt;strong&gt;#ff4103&lt;/strong&gt; ●&lt;br&gt; &lt;small&gt;&lt;abbr title=&#34;Contrast Ratio&#34;&gt;CR&lt;/abbr&gt;: 2.90738237&lt;/small&gt;
&lt;/td&gt;
&lt;td style=&#34;background-color:#e7e9fd;color:#ff4103&#34;&gt;
#ff4103 &lt;strong&gt;#ff4103&lt;/strong&gt; ● &lt;br&gt; &lt;small&gt;&lt;abbr title=&#34;Contrast Ratio&#34;&gt;CR&lt;/abbr&gt;: 2.90738217&lt;/small&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;That was simple enough, but this color’s worst-case contrast ratio is less than 0.0000002 better than the runner-up. Surely even very mild aesthetic considerations will outweigh that. (It’s highly doubtful that the formulae I used were intended to have this degree of precision in the first place.)&lt;/p&gt;
&lt;p&gt;After playing with a few ways to get a spread of options, I settled on categorizing colors into six buckets of saturation and twelve buckets of hue in the &lt;a href=&#34;https://en.wikipedia.org/wiki/HSL_and_HSV#Formal_derivation&#34;&gt;simple HSV model&lt;/a&gt;, and then finding the optimal color within each bucket. Here is a table of my results:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Selects the Hard FP Way</title>
      <link>//blog.vero.site/post/sql-select</link>
      <pubDate>Fri, 16 Apr 2021 19:41:49 -0700</pubDate>
      
      <guid>//blog.vero.site/post/sql-select</guid>
      <description>&lt;p&gt;This post is motivated by reasons very similar to the ones that motivated my &lt;a href=&#34;//blog.vero.site/post/react-redux&#34;&gt;React and Redux “tutorial”&lt;/a&gt;. Again, it should be more accurately but less informatively titled “How I wish SQL SELECTs were explained to me”. Again, it does not imply that this method of explanation is suitable for anybody else. One difference is that this time, I mostly only wanted to learn about SQL SELECTs to the extent it would help me perform and optimize queries in Django’s ORM, but to prevent this post from languishing forever in my drafts folder, that material has been sectioned off into a possible future post, because I figured out what I wanted, ran out of steam, and am now trying to learn TLA⁺. Just me things.&lt;/p&gt;
&lt;h3 id=&#34;background&#34;&gt;Background&lt;/h3&gt;
&lt;p&gt;The SQL standard is confusing and almost never completely implemented; there are huge inconsistencies between SQL implementations. I will focus on SQLite because it’s popular and easy to play with, but generally try to stay away from unpopular or nonstandard features. &lt;a href=&#34;https://www.sqlite.org/lang_select.html&#34;&gt;SQLite’s SELECT documentation&lt;/a&gt; is good reading for &lt;em&gt;one&lt;/em&gt; particular SQL implementation.&lt;/p&gt;
&lt;p&gt;A SQL database is a place where you store and query a bunch of data that’s organized into tables. A table is a homogeneous list of rows. A row is a heterogeneous tuple of values of various simple data types. The data types supported depend on the SQL implementation; typical examples are integers and strings of various sizes, floating point numbers, and dates/datetimes. All of these types can be nullable; NULL is a SQL value that can appear just about anywhere. (Like many of the other SQL features, NULL is handled somewhat inconsistently across SQL implementations, but as a first-order approximation it’s closer to a floating-point NaN than, say, Java’s “null”. We’ll talk more about it later.) However, note that you can’t have a variable-size list of other things in a row. And just to make sure it’s clear, all the rows in a given table must have the same data types in the same order.&lt;/p&gt;
&lt;p&gt;A “column” is just what you’d intuitively expect it to be: it’s the homogeneous list of all values in a particular position in each row of a table, which all have the same data type. One thing I haven’t mentioned yet is that table columns all have names. This is true both for tables stored in the database and for the ephemeral tables that are the output of queries.&lt;/p&gt;
&lt;p&gt;Since I’ll also be referring to more complex types like lists and tuples often seen in conventional programming languages, I’ll call these simple data types “scalar types” and values of those types “scalars”. This is not SQL terminology; documentation usually just calls these “data types”. Here’s &lt;a href=&#34;https://www.sqlite.org/datatype3.html&#34;&gt;SQLite’s page on data types&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To play along, install SQLite and run it. You should get dropped into a connection to an ephemeral in-memory database, which is plenty enough for our purposes. Make a table and mutter some magic incantations to make the output a little prettier for us:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode sql&#34;&gt;&lt;code class=&#34;sourceCode sql&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;TABLE&lt;/span&gt; a (&lt;span class=&#34;kw&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;INTO&lt;/span&gt; a &lt;span class=&#34;kw&#34;&gt;VALUES&lt;/span&gt; (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;), (&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;), (&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;), (&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;.headers &lt;span class=&#34;kw&#34;&gt;on&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;.&lt;span class=&#34;kw&#34;&gt;mode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;column&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: How to Leaderboard</title>
      <link>//blog.vero.site/post/advent-leaderboard</link>
      <pubDate>Tue, 24 Nov 2020 19:13:19 -0800</pubDate>
      
      <guid>//blog.vero.site/post/advent-leaderboard</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt; (briefly, “AoC”) is a series of 25 festive programming puzzles&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; released daily December 1–25. Each puzzle has two parts, which use the same text input and are related; to solve a part, you submit the right output corresponding to the input on the website.&lt;/p&gt;
&lt;p&gt;If you’re reading this, I suspect there’s a good chance you knew that already, but in case you’re new to Advent of Code, let me try to briefly explain why I like Advent of Code, from the perspective of somebody who’s spent a lot of their life so far doing programming competitions.&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The event has a fantastic community surrounding it. I’m the most familiar with &lt;a href=&#34;https://www.reddit.com/r/adventofcode/&#34;&gt;the subreddit&lt;/a&gt;, which is full of helpful people, interesting discussions, non-programming community games, and the occasional &lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/e6iw6l/day_5_browserbased_interactive_intcode_processor/&#34;&gt;wonderfully&lt;/a&gt;, &lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/e7ylwd/i_solved_day_8_entirely_in_minecraft/&#34;&gt;spectacularly&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/eb79s0/2019_day_10_blowing_up_asteroids_in_unity/&#34;&gt;overengineered&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/ea8mif/2019_day_13_excel_did_you_think_i_would_give_up/&#34;&gt;solution&lt;/a&gt; to a puzzle; but I know there are also many smaller chatrooms and subcommunities focused on, say, specific timezones or programming languages.&lt;/li&gt;
&lt;li&gt;Another aspect is the unique two-part format of each puzzle. Even though they use the same input, you don’t get to see the second part until after you’ve solved the first one, a feature that Eric Wastl (AoC’s creator) has taken full advantage of in designing puzzles. The second part is often a surprising twist on the first part, which keeps you on your toes and challenges you to keep your code moderately general or refactorable in a way that I think almost no other programming challenges do. This sometimes even happens between days in a calendar, when a puzzle turns out to be about some model of computation you implemented two or five or ten days ago — hope you kept your code and remember how it works!&lt;/li&gt;
&lt;li&gt;Finally, AoC also has some non-rigorous puzzles that force you to use your intuition and “human intelligence”, either by interpreting the problem statement heuristically or writing code to let you explore the input. There are quite a few puzzles where it’s infeasible to write code that handles every step of obtaining the output from the input. The result is that Advent of Code can feature quite a few challenges that I’ve found particularly compelling because I think they simply could not be posed on any other contest platform.&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are the things that make AoC stand out to me, but it also does a lot of other things well — the challenges are fun, approachable, and varied even aside from their interrelations; there is a long, dramatic story tying everything together (although it’s an &lt;a href=&#34;https://tvtropes.org/pmwiki/pmwiki.php/Main/ExcusePlot&#34;&gt;Excuse Plot&lt;/a&gt; if there ever was such a thing); and, although this is obviously subjective, I find the website’s minimalist-adjacent, terminal-esque aesthetic really charming (there is a &lt;em&gt;lot&lt;/em&gt; of detail in &lt;a href=&#34;https://adventofcode.com/2019&#34;&gt;2019’s calendar&lt;/a&gt;… after you solve everything). I’ve only done the last two years of Advent of Code, but it really seems like a one-of-a-kind event to me.&lt;/p&gt;
&lt;p&gt;Anyway, one particular feature Advent of Code has is a leaderboard, which you can get on by being one of the first 100 people worldwide to solve each puzzle. The competition is fierce — every year, thousands of people compete to get on the leaderboard. Near the start of AoC 2019, &lt;a href=&#34;https://gist.github.com/mcpower/87427528b9ba5cac6f0c679370789661&#34;&gt;mcpower&lt;/a&gt; (&lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/e2wjhf/tips_for_getting_on_the_advent_of_code_leaderboard/&#34;&gt;reddit discussion&lt;/a&gt;) and &lt;a href=&#34;https://kevinyap.ca/2019/12/going-fast-in-advent-of-code/&#34;&gt;Kevin Yap&lt;/a&gt; (&lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/e82f7a/going_fast_in_advent_of_code/&#34;&gt;reddit discussion&lt;/a&gt;) wrote some articles about how to do this, both of which are worth reading. I also thought about writing such an article and started a draft, but I didn’t get it anywhere close to publishable before AoC had concluded, at which point I assumed few people would be interested. But here it is now.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Rvalue References: The Unnecessarily Detailed Guide</title>
      <link>//blog.vero.site/post/rvalue-references</link>
      <pubDate>Mon, 16 Nov 2020 00:25:50 -0800</pubDate>
      
      <guid>//blog.vero.site/post/rvalue-references</guid>
      <description>&lt;p&gt;By a strange quirk of fate, I have started writing C++ for a living.&lt;/p&gt;
&lt;p&gt;Learning C++ was about as complicated as I think I expected it to be. By line count, I’ve written a lot of C++ for programming competitions, but I knew that I had only ever used a small cross-section of the language: basic control flow and variables, STL containers and algorithms, structs on which you mechanically define &lt;code&gt;bool operator&amp;lt;(const T&amp;amp; other) const&lt;/code&gt; so STL algorithms can order them, and the very occasional macro or templated helper function. There were many features I wasn’t even aware existed.&lt;/p&gt;
&lt;p&gt;In the process of learning C++ professionally, one rabbit hole I fell into quickly was C++11’s defining feature, the &lt;em&gt;rvalue reference&lt;/em&gt;, and how it can be used to implement &lt;em&gt;move semantics&lt;/em&gt; and &lt;em&gt;perfect forwarding&lt;/em&gt;. By poring over a copy of the widely recommended book &lt;a href=&#34;https://www.amazon.com/Effective-Modern-Specific-Ways-Improve/dp/1491903996&#34;&gt;&lt;cite&gt;Effective Modern C++&lt;/cite&gt;&lt;/a&gt;, by Scott Meyers, and a few dozen StackOverflow answers and blog posts, I roughly understood it after a few days, but still had a sort of blind-men-feeling-the-elephant feeling. I was confused about what lay under some of the abstractions I had been using, unsure of the full shape of the pitfalls that some of the guides had pointed out to me, and generally uncomfortable that there were still many small variations of the code I had seen that I couldn’t predict the behavior of. It took many more days to work myself out of there, and I wished I had had a guide that explained rvalue references and their applications to a bit more depth than what might be necessary for day-to-day use. So here’s my attempt to explain rvalue references in my own fundamental I-want-to-know-how-things-work-no-&lt;em&gt;really&lt;/em&gt; style.&lt;/p&gt;
&lt;p&gt;(If this vision doesn’t resonate with you, there are many other posts explaining rvalue references out there that you might prefer. Feel free to just skim the executive summary and/or check out some of the linked articles in the Background section.)&lt;/p&gt;
&lt;h3 id=&#34;executive-summary&#34;&gt;Executive Summary&lt;/h3&gt;
&lt;p&gt;I got… pretty carried away when writing this post, and a lot of it is just for my own understanding, which may or may not be useful to readers. Here’s a much more concise rundown (assuming you know basic C++ already):&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Signed Modulo</title>
      <link>//blog.vero.site/post/modulo</link>
      <pubDate>Tue, 04 Feb 2020 18:00:58 -0500</pubDate>
      
      <guid>//blog.vero.site/post/modulo</guid>
      <description>&lt;p&gt;One thing many mathematically-inclined programmers run into when implementing mathematical algorithms, particularly number-theoretic ones, is that the &lt;a href=&#34;https://en.wikipedia.org/wiki/Modulo_operation&#34;&gt;modulo operation&lt;/a&gt; doesn’t behave how they expect or prefer.&lt;/p&gt;
&lt;p&gt;In many languages, this operator is denoted &lt;code&gt;%&lt;/code&gt;. Concretely, one might prefer that, if the second argument is positive, then the modulo operation would always give a nonnegative result. Under this behavior, the expression &lt;code&gt;(-5) % 3&lt;/code&gt; would evaluate to &lt;code&gt;1&lt;/code&gt; rather than &lt;code&gt;-2&lt;/code&gt;. This is a lot more useful for number theory because then for positive integers &lt;code&gt;n&lt;/code&gt;, the &lt;code&gt;% n&lt;/code&gt; operation actually maps integers to exactly the &lt;code&gt;n&lt;/code&gt; canonical representatives for the residue classes. As a result, &lt;span class=&#34;math inline&#34;&gt;\(a \equiv b \mod n\)&lt;/span&gt; if and only if &lt;code&gt;a % n == b % n&lt;/code&gt;. You can also do things like index into a length-&lt;code&gt;n&lt;/code&gt; array with &lt;code&gt;a % n&lt;/code&gt; and know that the index will be in-bounds. Finally, there are also optimization opportunities: modding by a power of 2 becomes equivalent to a simple bitwise AND, which is really fast on modern computers.&lt;/p&gt;
&lt;p&gt;A few programming languages, notably Python, do implement &lt;code&gt;%&lt;/code&gt; this way. However, the majority of languages today, including pretty much everything remotely descended from C, do not; instead, &lt;code&gt;(-5) % 3&lt;/code&gt; is &lt;code&gt;-2&lt;/code&gt;. This post attempts to track down why.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The first thing to note is that there is a more important number-theoretic identity we’d like to have:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\texttt{a} = (\texttt{a / b}) \cdot \texttt{b} + (\texttt{a \% b}). \tag{1}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In words, the integer division and modulo operators should give a breakdown of &lt;code&gt;a&lt;/code&gt; into a sum of some copies of &lt;code&gt;b&lt;/code&gt; plus a remainder. Note that this equation also implies that specifying the rounding behavior of division is equivalent to specifying the sign behavior of the modulo operation, which will come up repeatedly later.&lt;/p&gt;
&lt;p&gt;It’s also very uncontroversial that that remainder should have no copies of &lt;code&gt;b&lt;/code&gt;, positive or negative, left over, which gives the constraint:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[|\texttt{a \% b}| &amp;lt; |\texttt{b}|. \tag{2}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Every programming language I can think of satisfies these two constraints.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; So far so good. However, these two constraints don’t uniquely determine the values of &lt;code&gt;a % b&lt;/code&gt; when &lt;code&gt;a&lt;/code&gt; isn’t divisible by &lt;code&gt;b&lt;/code&gt;; there are two possible values for &lt;code&gt;a % b&lt;/code&gt;, one positive and one negative. Concretely, we could express &lt;span class=&#34;math inline&#34;&gt;\(-5\)&lt;/span&gt; as either &lt;span class=&#34;math inline&#34;&gt;\((-1) \cdot 3 + (-2)\)&lt;/span&gt; or &lt;span class=&#34;math inline&#34;&gt;\((-2) \cdot 3 + 1\)&lt;/span&gt;, so &lt;code&gt;(-5) % 3&lt;/code&gt; could be &lt;code&gt;-2&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It’s still mostly uncontroversial that, if &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are both positive, then &lt;code&gt;a % b&lt;/code&gt; should be nonnegative as well; we could call this constraint (3).&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; However, if &lt;code&gt;a&lt;/code&gt; is negative and &lt;code&gt;b&lt;/code&gt; is positive, programming languages start to diverge in their behavior. Why?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rocket Equation</title>
      <link>//blog.vero.site/post/advent-rocket</link>
      <pubDate>Sun, 01 Dec 2019 13:38:14 -0500</pubDate>
      
      <guid>//blog.vero.site/post/advent-rocket</guid>
      <description>&lt;p&gt;It’s December, so it’s time for a lot of things, including &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt;. I will not be able to be as competitive as I was last year, and already lost a lot of points to a really silly mistake on day 1, but I’ll be playing when I can and &lt;a href=&#34;https://github.com/betaveros/advent-of-code-golf-2019&#34;&gt;golfing&lt;/a&gt; the problems when I have time (so far: 7 + 14 bytes).&lt;/p&gt;
&lt;p&gt;As one might expect, &lt;a href=&#34;https://adventofcode.com/2019/day/1&#34;&gt;Day 1&lt;/a&gt; is not too complex, but the second part can be analyzed to some mathematical depth and was discussed a bit on Reddit; plus, it occurred to me recently that I set up KaTeX on my blog but never used it, so I was looking for an excuse to write some equations anyway.&lt;/p&gt;
&lt;p&gt;The problem statement for part 2, in brief: We are tasked with calculating the total mass of fuel required to launch a rocket module of a given mass. For something of mass &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;, one can compute the directly required mass of fuel by dividing &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; by 3, rounding down, and subtracting 2; if the result is negative, it is taken to be 0 instead. However, the directly required fuel also requires fuel itself, calculated from its own mass by the same procedure, and that required fuel requires fuel based on its own mass, and so on until you reach fuel with 0 requirement.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>callsite</title>
      <link>//blog.vero.site/post/callsite</link>
      <pubDate>Mon, 16 Sep 2019 01:18:58 -0400</pubDate>
      
      <guid>//blog.vero.site/post/callsite</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Call me maybe? &lt;code&gt;nc rev.chal.csaw.io 1001&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A rev with a nasty binary. There are so many functions. I do not like this binary.&lt;/p&gt;
&lt;figure&gt;
&lt;a href=&#34;//blog.vero.site/img/callsite-gross.png&#34;&gt;&lt;img src=&#34;//blog.vero.site/img/callsite-gross.png&#34; alt=&#34;Screenshot of IDA Pro on the callsite binary, with a lot of code and functions.&#34; /&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;static-analysis&#34;&gt;Static Analysis&lt;/h3&gt;
&lt;p&gt;After staring at the sea of functions in IDA for a little bit, I gave up and tried dumb things instead.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>unagi</title>
      <link>//blog.vero.site/post/unagi</link>
      <pubDate>Sun, 15 Sep 2019 23:43:10 -0400</pubDate>
      
      <guid>//blog.vero.site/post/unagi</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;come get me&lt;/p&gt;
&lt;p&gt;http://web.chal.csaw.io:1003&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This was a web challenge with a few pages. The “User” page displayed some user information:&lt;/p&gt;
&lt;figure&gt;
&lt;a href=&#34;//blog.vero.site/img/unagi-user.png&#34;&gt;&lt;img src=&#34;//blog.vero.site/img/unagi-user.png&#34; alt=&#34;Screenshot of User page, transcribed below&#34; /&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Name: Alice&lt;br /&gt;
Email: alice@fakesite.com&lt;br /&gt;
Group: CSAW2019&lt;br /&gt;
Intro: Alice is cool&lt;/p&gt;
&lt;p&gt;Name: Bob&lt;br /&gt;
Email: bob@fakesite.com&lt;br /&gt;
Group: CSAW2019&lt;br /&gt;
Intro: Bob is cool too&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The “About” page simply told us, “Flag is located at /flag.txt, come get it”. The most interesting page was “Upload”, where we could view an example users XML file:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>baby_boi (A Textbook CTF ROP Tutorial)</title>
      <link>//blog.vero.site/post/baby-boi</link>
      <pubDate>Sun, 15 Sep 2019 22:12:04 -0400</pubDate>
      
      <guid>//blog.vero.site/post/baby-boi</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Welcome to pwn.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nc pwn.chal.csaw.io 1005&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ahhh, CSAW CTF. Amidst all the other CTFs where we’re competing with security professionals who probably have decades of experience and who follow security developments for a living or whatever, there remains a competition where scrubs like me can apply our extremely basic CTF skills and still feel kinda smart by earning points. Now that I’ve graduated and am no longer eligible, our team was pretty small and I didn’t dedicate the full weekend to the CTF, but it means I got to do the really easy challenges in the categories that I was the worst at, by which I mean pwn.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;baby_boi&lt;/code&gt; is pretty much the simplest possible modern ROP (the modern security protections NX and ASLR are not artificially disabled, but you get everything you need to work around them). We even get source code.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode c&#34;&gt;&lt;code class=&#34;sourceCode c&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;dt&#34;&gt;char&lt;/span&gt; **argv[]) {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;char&lt;/span&gt; buf[&lt;span class=&#34;dv&#34;&gt;32&lt;/span&gt;];&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;  printf(&lt;span class=&#34;st&#34;&gt;&amp;quot;Hello!&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;  printf(&lt;span class=&#34;st&#34;&gt;&amp;quot;Here I am: %p&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;, printf);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;  gets(buf);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So there’s nothing novel here for experienced pwners, but I feel like there is a shortage of tutorials that walk you through how to solve a textbook ROP the way you’d want to solve it in a CTF, so here is a writeup.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Multiplication by Juxtaposition</title>
      <link>//blog.vero.site/post/multiplication</link>
      <pubDate>Sun, 04 Aug 2019 09:49:20 -0400</pubDate>
      
      <guid>//blog.vero.site/post/multiplication</guid>
      <description>&lt;p&gt;We interrupt the irregularly scheduled philosophical posts for some programming memes:&lt;/p&gt;
&lt;p&gt;Over the last few days, the Internet has divided itself over what the value of the expression 8÷2(2+2) should be. Some say it should be evaluated as (8÷2)×(2+2) = 16. Some say it should be evaluated as 8÷(2×(2+2)) = 1.&lt;/p&gt;
&lt;p&gt;At the risk of belaboring the obvious, the core dispute here is not really mathematical. There is not some sequence of mathematical operations that produces some number, where mathematicians disagree about what number it produces. Instead, this is a dispute about mathematical notation: what sequence of mathematical operations the expression corresponds to the way it’s written. Specifically, it is a dispute about whether multiplication written as juxtaposition (how “2” is written right next to “(2+2)”) has strictly higher precedence than division. It is closer to a linguistic or typographical dispute than a purely mathematical one, and the correct answer to the dispute is that whoever wrote the expression that way should learn to write math better.&lt;/p&gt;
&lt;p&gt;This debate is not even new. The internet had fun arguing over &lt;a href=&#34;https://knowyourmeme.com/memes/48293&#34;&gt;48÷2(9+3) and 6÷2(1+2)&lt;/a&gt;, which are functionally identical ambiguous expressions, eight years ago. I don’t know why the debate is resurging now and why we still haven’t gotten tired of it.&lt;/p&gt;
&lt;p&gt;But life is short, so since we’re here anyway, let’s make some additional memes.&lt;/p&gt;
&lt;h3 id=&#34;asking-the-computer&#34;&gt;Asking the computer&lt;/h3&gt;
&lt;p&gt;Some of my coworkers had the idea to ask some programming languages what the answer was. The results were underwhelming.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python3
Python 3.6.7 (default, Oct 22 2018, 11:32:17)
[GCC 8.2.0] on linux
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; 8/2(2+2)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: &amp;#39;int&amp;#39; object is not callable&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>refrain</title>
      <link>//blog.vero.site/post/refrain</link>
      <pubDate>Wed, 27 Mar 2019 18:26:41 -0400</pubDate>
      
      <guid>//blog.vero.site/post/refrain</guid>
      <description>&lt;pre&gt;&lt;code&gt;http://111.186.63.17/perf.data.gz

Environment: Ubuntu 16.04+latex&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this challenge, we get a gzipped file called &lt;code&gt;perf.data&lt;/code&gt; and a minimal description of an environment. Googling this reveals that &lt;code&gt;perf.data&lt;/code&gt; is a record format of the &lt;code&gt;perf&lt;/code&gt; tool, a Linux profiler. Installing &lt;code&gt;perf&lt;/code&gt; allows us to read &lt;code&gt;perf.data&lt;/code&gt; and see some pretty interactive tables of statistics in our terminal describing the profiling results, from which we can see some libraries and addresses being called, but they don’t reveal much about what’s going on. One hacky way to see more of the underlying data in a more human-readable way (and to see just how much of it there is) is &lt;code&gt;perf report -D&lt;/code&gt;, which dumps the raw data in an ASCII format, but this is still not that useful. (One might hope that one could simply grep for the flag in this big text dump, but it’s nowhere to be seen.) Still, from this file, we can definitely read off all the exact library versions that the &lt;code&gt;perf record&lt;/code&gt; was run against.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>React and Redux the Hard FP Way</title>
      <link>//blog.vero.site/post/react-redux</link>
      <pubDate>Fri, 07 Dec 2018 16:44:20 -0500</pubDate>
      
      <guid>//blog.vero.site/post/react-redux</guid>
      <description>&lt;p&gt;A more accurate but less informative title for this post would be “How I wish React and Redux were explained to me”. Note that this does &lt;em&gt;not&lt;/em&gt; imply that this method of explanation is suitable for anybody else. I suspect it won’t be for most people.&lt;/p&gt;
&lt;p&gt;I had to learn React and Redux the past summer for my internship at MemSQL, and there were hundreds of articles that explain React and Redux in addition to the (fine) built-in documentation, but none of them scratched the itch; I wanted to know what was going on completely, including some of the technical details and the philosophy I ought to be following, as well as efficiently. I did not need another explanation about how to think functionally, in JavaScript types or with immutable data. React’s chapter on &lt;a href=&#34;https://reactjs.org/docs/conditional-rendering.html&#34;&gt;Conditional Rendering&lt;/a&gt;, for example, felt so inefficient — I know what &lt;code&gt;if&lt;/code&gt; statements and conditional expressions are, and I know how to refactor complicated subexpressions into variables…&lt;/p&gt;
&lt;p&gt;So here’s the guide I wish I had. I think. It’s been months since I started it (as usual, for posts on this blog) and it is probably incomplete. However, I haven’t written React/Redux deeply in a while, so I didn’t have much motivation to continue to investigate the incomplete bits; and the perfect is the enemy of the good, so here it is.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PLC</title>
      <link>//blog.vero.site/post/plc</link>
      <pubDate>Sun, 30 Sep 2018 23:16:44 -0400</pubDate>
      
      <guid>//blog.vero.site/post/plc</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;We’ve burrowed ourselves deep within the facility, gaining access to the programable logic controllers (PLC) that drive their nuclear enrichment centrifuges. Kinetic damage is necessary, we need you to neutralize these machines.&lt;/p&gt;
&lt;p&gt;You can access this challenge at &lt;a href=&#34;https://wargames.ret2.systems/csaw_2018_plc_challenge&#34;&gt;https://wargames.ret2.systems/csaw_2018_plc_challenge&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A much belated post. This is a pwn challenge on a custom online wargaming platform. We are provided with the assembly of what’s ostensibly a programmable logic controller (PLC) for a centrifuge in a nuclear reactor. The challenge looks like it’s still up, so you can take a look and follow along.&lt;/p&gt;
&lt;p&gt;This was the first &lt;a href=&#34;https://en.wikipedia.org/wiki/Return-oriented_programming&#34;&gt;ROP&lt;/a&gt; (okay, spoiler, it’s a ROP) I ever pulled off live during an actual CTF, which I was pretty excited about. The web platform meant I had to worry less about setup, and even though some of the tools it provided were a little lacking (no gdb shortcuts like &lt;code&gt;until&lt;/code&gt;, no pwntools utilities for packing/unpacking numbers, … no &lt;code&gt;one_gadget&lt;/code&gt;), I think they ultimately made the whole thing a lot more educational for me, so kudos to the folks behind it. I’ve included a brief description of all the exploit techniques that lead up to ROP when we get to that, so hopefully this post will be useful even if you don’t know much about pwning binaries. The prerequisites would be some knowledge with x86 assembly, how executables are loaded into memory, and how to use &lt;code&gt;gdb&lt;/code&gt; (or fictionalized web knockoffs thereof).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Proprietary Format</title>
      <link>//blog.vero.site/post/proprietary-format</link>
      <pubDate>Thu, 28 Jun 2018 23:12:15 -0700</pubDate>
      
      <guid>//blog.vero.site/post/proprietary-format</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;The villains are communicating with their own proprietary file format. Figure out what it is.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ nc proprietary.ctfcompetition.com 1337&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;We get a server that will talk to us on a port and a &lt;code&gt;flag.ctf&lt;/code&gt; file that’s definitely not a binary. It’s a &lt;a href=&#34;https://en.wikipedia.org/wiki/Black_box&#34;&gt;black-box&lt;/a&gt; reversing challenge! I was @-mentioned as the person who might want to due to solving bananaScript (CSAW CTF Quals 2017) as a black box, although that gave a binary that it was possible in theory to reverse. Here black-box reversing is the only option.&lt;/p&gt;
&lt;p&gt;For the first few lines of input that the server wants, it responds with quite helpful error messages to help you appease it. If the first line you give it is not &lt;code&gt;P6&lt;/code&gt;, it complains:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cat Chat</title>
      <link>//blog.vero.site/post/cat-chat</link>
      <pubDate>Thu, 28 Jun 2018 23:12:06 -0700</pubDate>
      
      <guid>//blog.vero.site/post/cat-chat</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;You discover this cat enthusiast chat app, but the annoying thing about it is that you’re always banned when you start talking about dogs. Maybe if you would somehow get to know the admin’s password, you could fix that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This challenge is a simple chat app written in NodeJS. The home page redirects you to a chat room labeled with a random UUID. Anybody can join the same chat room with the URL.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//blog.vero.site/img/cat-chat-0.png&#34; alt=&#34;Fresh Cat Chat room&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In a chat room, you can chat and issue two commands, &lt;code&gt;/name&lt;/code&gt; to set your name and &lt;code&gt;/report&lt;/code&gt; to report that somebody is talking about dogs. After anybody in the chat room issues &lt;code&gt;/report&lt;/code&gt;, the admin shows up, listens for a while, and bans anybody who mentions the word “dog”.&lt;/p&gt;
&lt;p&gt;There are two more commands, &lt;code&gt;/secret&lt;/code&gt; and &lt;code&gt;/ban&lt;/code&gt;, which are in the server source code and also described in comments in the HTML source if you didn’t notice:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JS Safe 2.0</title>
      <link>//blog.vero.site/post/js-safe-2</link>
      <pubDate>Thu, 28 Jun 2018 23:12:01 -0700</pubDate>
      
      <guid>//blog.vero.site/post/js-safe-2</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;You stumbled upon someone’s “JS Safe” on the web. It’s a simple HTML file that can store secrets in the browser’s localStorage. This means that you won’t be able to extract any secret from it (the secrets are on the computer of the owner), but it looks like it was hand-crafted to work only with the password of the owner…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The challenge consists of a fancy HTML file with a cute but irrelevant animated cube and some embedded JavaScript.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//blog.vero.site/img/js-safe-2-empty.png&#34; alt=&#34;Screenshot of JS Safe 2.0 with a text box and a cube&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>shellql</title>
      <link>//blog.vero.site/post/shellql</link>
      <pubDate>Sun, 13 May 2018 15:07:38 -0400</pubDate>
      
      <guid>//blog.vero.site/post/shellql</guid>
      <description>&lt;p&gt;The hardest challenge of not very many I solved in this CTF. What a struggle! I have a long way to improve. It was pretty fun though. (I solved “You Already Know”, and got the essence of “ghettohackers: Throwback”, but didn’t guess the right flag format and believe I was asleep when they released the hint about it.)&lt;/p&gt;
&lt;p&gt;The challenge consists of a simple PHP script that opens a MySQL connection and then feeds our input into a custom PHP extension &lt;code&gt;shellme.so&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode php&#34;&gt;&lt;code class=&#34;sourceCode php&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;$link&lt;/span&gt; = &lt;span class=&#34;fu&#34;&gt;mysqli_connect&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;shellql&amp;#39;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;shellql&amp;#39;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;shellql&amp;#39;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;);&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;isset&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;shell&amp;#39;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;]))&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;{&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;   &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;shell&amp;#39;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;])&lt;/span&gt; &amp;lt;= &lt;span class=&#34;dv&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;   {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;shell&amp;#39;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;];&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;      shellme&lt;span class=&#34;ot&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;shell&amp;#39;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;]);&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;   }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;   &lt;span class=&#34;kw&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;();&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The extension basically just executes &lt;code&gt;$_POST[&#39;shell&#39;]&lt;/code&gt; as shellcode after a strict SECCOMP call, &lt;a href=&#34;http://man7.org/linux/man-pages/man2/prctl.2.html&#34;&gt;prctl&lt;/a&gt;(&lt;a href=&#34;https://elixir.bootlin.com/linux/v4.16.8/source/include/uapi/linux/prctl.h#L68&#34;&gt;22&lt;/a&gt;, &lt;a href=&#34;https://elixir.bootlin.com/linux/v4.1/source/include/uapi/linux/seccomp.h#L10&#34;&gt;1&lt;/a&gt;). This means that we can only use the four syscalls &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt;, and &lt;code&gt;exit&lt;/code&gt;, and &lt;code&gt;sigreturn&lt;/code&gt;, where the latter two aren’t particularly useful.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;//blog.vero.site/img/shell_this.png&#34; alt=&#34;Disassembled innermost function of interest in shellme.so&#34; /&gt;&lt;figcaption&gt;Disassembled innermost function of interest in &lt;code&gt;shellme.so&lt;/code&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The goal is to read the flag from the open MySQL connection.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Messy Desk</title>
      <link>//blog.vero.site/post/messy-desk</link>
      <pubDate>Sun, 06 May 2018 13:52:52 -0400</pubDate>
      
      <guid>//blog.vero.site/post/messy-desk</guid>
      <description>&lt;p&gt;This challenge is a video of somebody’s messy desk, with what is apparently the audio from a &lt;a href=&#34;https://www.youtube.com/watch?v=WwnI0RS6J5A&#34;&gt;Futurama clip&lt;/a&gt;. The desk is indeed extremely messy and full of things that aren’t particularly useful for us, but close examination reveals a QR code reflected in the globe in the middle.&lt;/p&gt;
&lt;p&gt;The challenge is all about getting that QR code. After trying our best to clean up the image, we ended up with this:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;//blog.vero.site/img/messy-qr.png&#34; alt=&#34;Maximally enhanced image of the QR code&#34; /&gt;&lt;figcaption&gt;Maximally enhanced image of the QR code&lt;/figcaption&gt;
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Pupper/Doggo</title>
      <link>//blog.vero.site/post/doggo</link>
      <pubDate>Sun, 06 May 2018 13:52:52 -0400</pubDate>
      
      <guid>//blog.vero.site/post/doggo</guid>
      <description>&lt;p&gt;We are presented with a big zip file of SML code, which implements an interpreter for a small ML-like language with a form of taint analysis in its type checker, called &lt;em&gt;Wolf&lt;/em&gt;. Concretely, every type in Wolf’s type system has an associated &lt;em&gt;secrecy&lt;/em&gt;: it is either “private” or “public”, and in theory, the type system makes it impossible to do any computation on private data to get a public result.&lt;/p&gt;
&lt;p&gt;Of course, this is a CTF, so the challenge is all about breaking the theoretical guarantees of the type system. When we submit code, it’s evaluated in a context with a private integer variable &lt;code&gt;flag&lt;/code&gt;; our code is typechecked, executed, and printed, but only if its type is public. The goal is to break the type system and write code that produces a public value that depends on &lt;code&gt;flag&lt;/code&gt;, so that we can exfiltrate &lt;code&gt;flag&lt;/code&gt; itself.&lt;/p&gt;
&lt;p&gt;In all, there are three progressively harder Wolf problems, named Pupper, Doggo, and Woofer. Doggo and Woofer are each encrypted with the flag of the challenge before it, so that you need to solve them in order (unless you can somehow blindly exploit servers running SML programs).&lt;/p&gt;
&lt;h3 id=&#34;wolf-overview&#34;&gt;Wolf Overview&lt;/h3&gt;
&lt;p&gt;Let’s first go over the Wolf syntax and semantics. (There are small differences between the three problems, but they’re syntactically identical and only semantically differ in cases that we’ll naturally get to.) The &lt;code&gt;examples&lt;/code&gt; folder has some examples of valid code:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode ml&#34;&gt;&lt;code class=&#34;sourceCode ocaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; x = (&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt; :&amp;gt; &lt;span class=&#34;kw&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dv&#34;&gt;6&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Sakura</title>
      <link>//blog.vero.site/post/sakura</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 -0500</pubDate>
      
      <guid>//blog.vero.site/post/sakura</guid>
      <description>&lt;p&gt;(Okay, this post is backdated.)&lt;/p&gt;
&lt;p&gt;Disassembling the executable produces a huge amount of code. There are some basic obfuscations like a lot of trivial identity functions nested in each other, and a few functions that wrap around identity functions but just add some constant multiple of 16. Most of the meat is in one very large function, though. If you disassemble this function with IDA, you see a lot of variable initializations and then a lot of interesting loops that are quite similar:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Thoroughly Stripped</title>
      <link>//blog.vero.site/post/thoroughly-stripped</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 -0500</pubDate>
      
      <guid>//blog.vero.site/post/thoroughly-stripped</guid>
      <description>&lt;p&gt;Woo, first CTF writeup. I got the opportunity to participate in the 2017 CSAW CTF finals with Don’t Hack Alone.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dumped by my core, left to bleed out bytes on the heap, I was stripped of my dignity… The last thing I could do was to let other programs strip me of my null-bytes just so my memory could live on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are provided with a core dump. Examining the flavor-text and the dump, we notice that the dump has no null bytes; we conjecture that they have been stripped out.&lt;/p&gt;
&lt;p&gt;Next, we examine the hexdump and look for any clues. There are a bunch of ASCII strings, but they look like normal debugging symbols. One thing that jumps out is that there are a couple fairly convincing regular striped patterns that become vertically aligned if you display 20 bytes in each line. Once we do that, we notice the following section. (This dump is from &lt;code&gt;&lt;a href=&#34;https://github.com/betaveros/xxb&#34;&gt;xxb&lt;/a&gt;&lt;/code&gt; but &lt;code&gt;xxd -c 20 thoroughlyStripped&lt;/code&gt; is quite sufficient.)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>020315040524</title>
      <link>//blog.vero.site/post/bcodex</link>
      <pubDate>Mon, 08 Aug 2016 13:54:22 +0800</pubDate>
      
      <guid>//blog.vero.site/post/bcodex</guid>
      <description>&lt;p&gt;&lt;code&gtlt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gtlt;/code&gt; &lt;a href=&#34;https://github.com/betaveros/bcodex&#34;&gt;&lt;code&gt;...-- ...-- ...-- ....- ....- ----- ...-- ..... ...-- -.... ....- ----.&lt;/code&gt;&lt;/a&gt; &lt;code&gtlt;/code&gt; &lt;a href=&#34;http://betaveros.github.io/bcodex/&#34;&gt;&lt;code&gt;..--- .- ....- ----- ....- -.... ..--- ----- ...-- ....- ...-- ..--- ...-- ..-. ..--- ----- ....- ..... ....- ...-- ....- .- ..--- ----- ...-- .- ....- ..... ..--- ----- ...-- ----. ...-- -.... ....- ...-- ...-- -.... ..... -----&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jam-Packed Fun and Games</title>
      <link>//blog.vero.site/post/jam</link>
      <pubDate>Mon, 21 Sep 2015 00:45:43 +0800</pubDate>
      
      <guid>//blog.vero.site/post/jam</guid>
      <description>&lt;p&gt;Did I say “fun”? That was short for function calls. Which are fun too, admittedly. Blah, I always go to such lengths to come up with snappy yet justified post titles and end up achieving neither.&lt;/p&gt;
&lt;p&gt;One more complimentary breakfast later:&lt;/p&gt;
&lt;p&gt;This is it.&lt;/p&gt;
&lt;p&gt;Google Code Jam World Finals. &lt;a href=&#34;//blog.vero.site/img/nametag.jpg&#34;&gt;&lt;img src=&#34;//blog.vero.site/img/nametag.jpg?w=170&#34; alt=&#34;[Google Code Jam 2015 name tag with my name and handle and country]&#34; width=&#34;170&#34; height=&#34;300&#34; class=&#34;aligncenter size-medium wp-image-3374&#34; /&gt;&lt;/a&gt; Let me take a moment to reflect. Seriously. I do not know how I made it this far this year. I guess I might be a top-500-ish competitive programmer globally, maybe even top-150-ish, but definitely not top-25-ish. And &lt;a href=&#34;https://code.google.com/codejam/contest/4254486/dashboard#s=p3&#34;&gt;Log Set&lt;/a&gt;, the hard problem that got me through Round 3, doesn’t seem like it plays to my forte particularly either. It’s a bit mathy, but the math bits aren’t the hard part; I think it’s largely implementation, with one psychological hurdle where you have to realize that, because of how few distinct integers there are in S′, you can efficiently solve the subset-sum instances you need to produce the lexicographically earliest answer. I’m actually kind of impressed I got that. It seems like the sort of hurdle I usually get stuck on. How did this happen?&lt;/p&gt;
&lt;p&gt;Maybe randomness. Maybe I was just particularly clear-minded during the round and wrote less buggy code than usual, because I had no expectation of making it whatsoever and so could look at the contest detachedly (until midway through the contest I accidentally noticed that my rank was under 20, and even then I tried very very hard not to think about it, and it kind of worked).&lt;/p&gt;
&lt;p&gt;But it happened, and now I’m here. Time to roll.&lt;/p&gt;
&lt;p&gt;In some emails much earlier in the Code Jam logistical process, Google had asked for “requests for changes and/or additions” to the software that would be installed on our competition computers, and I had sent them a long list:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi,&lt;br /&gt; Here are some things I’d like if they were installed, in decreasing order of priority:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
The Vim plugin syntastic ( https://github.com/scrooloose/syntastic )
&lt;/li&gt;
&lt;li&gt;
a Haskell compiler (probably Haskell Platform 2014.2.0.0 https://www.haskell.org/platform/ even though it’s a year old)
&lt;/li&gt;
&lt;li&gt;
the Haskell package hdevtools ( https://hackage.haskell.org/package/hdevtools ) so that the above two may be integrated
&lt;/li&gt;
&lt;li&gt;
(I don’t have enough Linux experience to name a specific thing to install, but command-line utilities that are the equivalent of pbcopy and pbpaste on Mac OS X, which allow me to redirect text into or out of the clipboard from the command line easily)
&lt;/li&gt;
&lt;/ol&gt;
Of course, this is my first Code Jam and I don’t know how reasonable these requests are. Any nontrivial subset would be appreciated.
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>A*</title>
      <link>//blog.vero.site/post/a-star</link>
      <pubDate>Mon, 20 Jul 2015 23:22:35 +0800</pubDate>
      
      <guid>//blog.vero.site/post/a-star</guid>
      <description>Nope, still no meaningful post today. Instead here is a pretty diagram of the A* search algorithm (A-star in English, for my search crawler overlords). At least, I hope it is; I spent more time fiddling with the pretty colors than making sure the algorithm I implemented was actually A*. It looks right, though? In the background, red component measures traversed distance from start, (inverted) green component measures difference between the traversed distance plus heuristic distance and the theoretically optimal heuristic distance from the start, blue component measures heuristic distance to goal.</description>
    </item>
    
    <item>
      <title>Phone</title>
      <link>//blog.vero.site/post/phone</link>
      <pubDate>Wed, 15 Jul 2015 23:58:02 +0800</pubDate>
      
      <guid>//blog.vero.site/post/phone</guid>
      <description>&lt;p&gt;&lt;strong&gt;tl;dr: anybody want to add me on Line or tell/remind me about other phone chat apps? betaveros as always.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Wow, talk about uninspired post titles.&lt;/p&gt;
&lt;p&gt;I got a new phone today. Or, well, it’s second-hand, actually. I try to make electronics last a long time, but I think this was justified given the state of my last phone’s screen:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;//blog.vero.site/img/screen.jpg&#34;&gt;&lt;img src=&#34;//blog.vero.site/img/screen.jpg?w=269&#34; alt=&#34;old phone screen, with a visibly malfunctioning black patch&#34; width=&#34;269&#34; height=&#34;300&#34; class=&#34;aligncenter size-medium wp-image-3142&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Besides, I’m going off to college and all. Anyway, the phone is pretty cool. It’s a slick shade of red, it came with a cover and everything, and it has one of those fancy 3x3-grid locks. How secure are those again?&lt;/p&gt;
&lt;p&gt;Well, we could just &lt;a href=&#34;https://stackoverflow.com/questions/6979524/android-lock-password-combinations&#34;&gt;find the answer on StackOverflow&lt;/a&gt;, but that’s boring.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chi Banner</title>
      <link>//blog.vero.site/post/chi-banner</link>
      <pubDate>Tue, 14 Jul 2015 21:21:36 +0800</pubDate>
      
      <guid>//blog.vero.site/post/chi-banner</guid>
      <description>Okay, I think I’m figuring this out. When I make a filler post for the streak, it should be an unabashed filler post, so I can accumulate some of the blogging time I find each day to work on a serious post (and for doing the other important stuff I should be doing!) instead of wasting it right away.
Life. I’m programming something for Dad involving a parser using Jison, and one of the tasks involved stuffing a custom lexer into the parser.</description>
    </item>
    
    <item>
      <title>College Emails</title>
      <link>//blog.vero.site/post/college-emails</link>
      <pubDate>Sat, 13 Jun 2015 09:08:33 +0800</pubDate>
      
      <guid>//blog.vero.site/post/college-emails</guid>
      <description>&lt;p&gt;(Frivolous blog content, posted as part of a &lt;a href=&#34;//blog.vero.site/post/commitment&#34;&gt;daily posting streak I have openly committed to&lt;/a&gt;; standard disclaimers apply)&lt;/p&gt;
&lt;p&gt;Out of boredom and curiosity, I &lt;a href=&#34;https://betaveros.github.io/bars-college.html&#34;&gt;graphed how many emails colleges sent me&lt;/a&gt;, excluding the colleges I actually applied to. I am being extremely polite and just calling them emails. I’ve wanted to make this for a long time, but it wasn’t until I saw this &lt;a href=&#34;https://medium.com/message/my-failed-experiment-in-time-travel-3aa2240a6bc0&#34;&gt;post about an email experiment&lt;/a&gt; on &lt;a href=&#34;http://waxy.org/links/&#34;&gt;waxy.org/links&lt;/a&gt; that I understood which tools I could use to quantify my emails. (And then I actually made it and procrastinated posting it here for two months. If you look at my GitHub page or activity you might have seen it already, though. Oops.)&lt;/p&gt;
&lt;p&gt;I don’t think the results were expected. Other than saying that, I leave the interpretation up to the reader because I’m on a tight blogging schedule. Cool? Cool.&lt;/p&gt;
&lt;p&gt;Step-by-step instructions:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adventures in Unicode Forensics</title>
      <link>//blog.vero.site/post/unicode-forensics</link>
      <pubDate>Sun, 17 May 2015 23:24:11 +0800</pubDate>
      
      <guid>//blog.vero.site/post/unicode-forensics</guid>
      <description>What do you do when you get a bunch of files like this from a zipfile?
I’ve blurred the messed-up file names because I’m not convinced it’s impossible to reconstruct the Chinese names of people from them and I’d rather err towards being paranoid about privacy. Except for the one file name whose author’s identity I’m OK with disclosing. Back story: I have been tasked with collecting everybody’s Chinese assignments for this semester.</description>
    </item>
    
    <item>
      <title>Puzzle 46 / Fillomino [LITS &#43; Extra Region &#43; Walls &#43; Anti-Walls &#43; Inequality &#43; Tapa &#43; Masyu]</title>
      <link>//blog.vero.site/post/puzzle-46</link>
      <pubDate>Sun, 29 Mar 2015 13:01:08 +0800</pubDate>
      
      <guid>//blog.vero.site/post/puzzle-46</guid>
      <description>&lt;blockquote&gt;
5:27 PM &lt;strong&gt;phenomist&lt;/strong&gt;: do you use gridderface to make pretty puzzles?&lt;br /&gt;
…&lt;br /&gt;
5:52 PM &lt;strong&gt;phenomist&lt;/strong&gt;: actually nvm excel is probably easier lol
&lt;/blockquote&gt;
&lt;p&gt;Okay I’m sorry this is a horrible puzzle where the rules don’t make sense and I didn’t even get it testsolved. I just wanted an image to concisely demonstrate the capabilities of &lt;a href=&#34;https://github.com/betaveros/gridderface&#34;&gt;gridderface&lt;/a&gt;, my puzzle marking and creation program, for the project homepage, after somebody expressed interest in using the program to write a puzzle. Then I got tremendously carried away.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; to D</title>
      <link>//blog.vero.site/post/c-to-d</link>
      <pubDate>Wed, 14 Jan 2015 00:00:00 +0800</pubDate>
      
      <guid>//blog.vero.site/post/c-to-d</guid>
      <description>&lt;p&gt;Some notes.&lt;/p&gt;
&lt;p&gt;I’m assuming you want to use D largely, but not entirely, for competitive programming. That’s me right now.&lt;/p&gt;
&lt;h3 id=&#34;basics&#34;&gt;Basics&lt;/h3&gt;
&lt;p&gt;Syntax is very similar. Function definitions, semicolon-terminated statements, variable declarations, and so on. You can declare &lt;code&gt;int main() {...}&lt;/code&gt; or &lt;code&gt;void main() {...}&lt;/code&gt; or something with arguments.&lt;/p&gt;
&lt;p&gt;Basic types like &lt;code&gt;bool&lt;/code&gt; and &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;double&lt;/code&gt; are all there. Wonderfully, &lt;code&gt;long&lt;/code&gt; is 64 bits. Instead of &lt;code&gt;unsigned&lt;/code&gt; whatever, just prefix a &lt;code&gt;u&lt;/code&gt;, e.g. &lt;code&gt;uint&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Arithmetic operators and bit operators are all there too, including unsigned right shift &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;. Although &lt;code&gt;^&lt;/code&gt; is still xor, D has exponentiation as &lt;code&gt;^^&lt;/code&gt;. Sadly, &lt;code&gt;%&lt;/code&gt; is still same-sign remainder; there’s no true mod.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode d&#34;&gt;&lt;code class=&#34;sourceCode d&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; std.stdio;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Casts look like &lt;code&gt;cast(int) x;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;control-flow&#34;&gt;Control Flow&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, and even &lt;code&gt;switch&lt;/code&gt; all work as you’d expect, along with &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;foreach&lt;/code&gt; is the nice addition though. Not only can you iterate over arrays and stuff, but range loops go like:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HOJ 226: CP (中)</title>
      <link>//blog.vero.site/post/hoj-cp</link>
      <pubDate>Mon, 15 Dec 2014 00:00:00 +0800</pubDate>
      
      <guid>//blog.vero.site/post/hoj-cp</guid>
      <description>&lt;p&gt;This post was written in Traditional Mandarin Chinese for my fellow competitive programmers in Taiwan.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://hoj.twbbs.org/judge/problem/view/226&#34;&gt;題目在這裡，HOJ 226&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有關的題目出現於NPSC 2014 高中組決賽pD。&lt;/p&gt;
&lt;p&gt;前置要求：treap (split, merge)跟在上面實作區段操作（請參考資訊枝幹）。&lt;/p&gt;
&lt;p&gt;這裡沒有完整的解答code，因為AC是要用血汗換來的才值得 :-)&lt;/p&gt;
&lt;h2 id=&#34;treap&#34;&gt;Treap&lt;/h2&gt;
&lt;p&gt;我討厭單字母&lt;code&gt;l&lt;/code&gt;的變數名稱（跟&lt;code&gt;1&lt;/code&gt;太像了。我沒有被這個雷過，這只是自己對自己程式碼可讀性的要求），所以我的子樹叫做&lt;code&gt;lc&lt;/code&gt;(left child)，&lt;code&gt;rc&lt;/code&gt;(right child)。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; Treap {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;    Treap * lc;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;    Treap * rc;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;unsigned&lt;/span&gt; pri;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;char&lt;/span&gt; val;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; size;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;};&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; size(Treap * a) { &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; a ? a-&amp;gt;size : &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;; }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; pull(Treap * a) {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (a) a-&amp;gt;size = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; + size(a-&amp;gt;lc) + size(a-&amp;gt;rc);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>[IOI 2014 Part 2] One Line to Solve Them All</title>
      <link>//blog.vero.site/post/one-line</link>
      <pubDate>Sat, 26 Jul 2014 23:49:14 +0800</pubDate>
      
      <guid>//blog.vero.site/post/one-line</guid>
      <description>&lt;p&gt;I started trying to sleep at 9 the night before the contest, tossed and turned in bed until 10, then fell asleep and got up at 3:35 in the morning. Blah. At that point, I went to the bathroom and applied some chapstick before trying to go back to sleep until 6. After breakfast, I grabbed a few minutes of sleep on the bus to the convention center where our contest would be, then slept on a sofa outside the actual contest hall alongside most of the rest of our team as we waited for a very long time until it was okay for us to enter. Competitions really mess with one’s sleep schedule.&lt;/p&gt;
&lt;p&gt;Then, much too soon, we could enter. Day 1 of the contest was about to start.&lt;/p&gt;
&lt;p&gt;The laptops were as yesterday, although they were protected with a white screensaver that indicated my name and ID as well as a countdown to the start of the contest. I was glad to see that my mousepad and all my writing utensils had survived without me. Somebody had the sense of humor to project an online stopwatch with an animated bomb fuse onto the screens to indicate the remaining time, which, once again, there was a lot of.&lt;/p&gt;
&lt;p&gt;I conferred briefly with Paul (TZW (alphaveros (?))) about vim settings for a bit, but there were still fifteen minutes left or so. I idly stretched, practiced typing my &lt;code&gt;.vimrc&lt;/code&gt; on an imaginary keyboard, and watched as the US dude two tables to my left unplugged his laptop’s mouse and rearranged absolutely everything on his table using the surface under his chair as swap space. (Well, that was how I mentally described it at the time, pending further revelations. (hint hint))&lt;/p&gt;
&lt;p&gt;Then it began.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[IOI 2014 Part 0] Waiting</title>
      <link>//blog.vero.site/post/waiting</link>
      <pubDate>Tue, 15 Jul 2014 21:30:53 +0800</pubDate>
      
      <guid>//blog.vero.site/post/waiting</guid>
      <description>&lt;p&gt;Yes, I know day 1 of the contest already ended and is probably a more interesting topic to blog about, but I finished writing this last night just before the internet was cut off to quarantine the contestants from the leaders, who received the problems and began translating them. I didn’t know about this until it was too late, which is why I’ve been waiting since yesterday to post this.&lt;/p&gt;
&lt;p&gt;To provide a counterpoint to the last post, one of the many, &lt;em&gt;many&lt;/em&gt; advantages of entering an international competition is that you get to meet a lot more people you already know, so there’s less time spent being socially awkward. While waiting for stuff to happen, aside from all the expected time spent with the Taiwan team, I also talked to, played games with, and otherwise entertained a whole lot of people I already knew, including my schoolmates (no less than fourteen of them were volunteers) and some of the college students who had shepherded us around during olympiad training.&lt;/p&gt;
&lt;p&gt;Which is a good thing, too, because there was a lot of waiting.&lt;/p&gt;
&lt;p&gt;First I waited for my teammates; my parents had decided to take me to the hotel (Fullon Shenkeng) directly, since I had a lot of stuff, and I had arrived early. This took about an hour, after which we had lunch. Then I waited for the hotel to give us our room cards, which took about five hours, after which we had dinner. Finally, at night, I waited for the Codeforces system tests. Very nerve-wracking. But I’m getting ahead of myself.&lt;/p&gt;
&lt;p&gt;Advantage #2 of being the home team: you can talk to all of the organizers and volunteers fluently, so you can get them to help you more quickly. Although we waited for our room cards for an obscenely long time, I got the volunteers to replace my pinyin-name-card with a legitimate one that said “Brian” on it really quickly.&lt;/p&gt;
&lt;p&gt;Unfortunately, after I talked to a few more people, it looks like they aren’t going to change my name in the database. So if anybody reading this chances to look at the IOI live ranking and is unable to find me, look for the first name “Po-En”.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>#pyconapac2014</title>
      <link>//blog.vero.site/post/pycon</link>
      <pubDate>Tue, 20 May 2014 22:26:53 +0800</pubDate>
      
      <guid>//blog.vero.site/post/pycon</guid>
      <description>&lt;p&gt;Late post. As usual.&lt;/p&gt;
&lt;p&gt;It started with an online competition — write programs, solve problems, get points. I wouldn’t call the problems easy, but they weren’t hard either. So I solved all of them. To make it even less impressive, only about twenty people submitted anything at all.&lt;/p&gt;
&lt;p&gt;But the result was just what it was: I ended up with a free ticket to &lt;a href=&#34;https://tw.pycon.org/2014apac/en/&#34;&gt;PyCon APAC 2014&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’d prefer a conference about a more functional programming language, but I’ll take what I get. Another adventure!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rise from the Ashes</title>
      <link>//blog.vero.site/post/rise</link>
      <pubDate>Tue, 29 Apr 2014 19:27:33 +0800</pubDate>
      
      <guid>//blog.vero.site/post/rise</guid>
      <description>&lt;p&gt;After the first stage of selection camp, I was very nervous because I was fifth place in a selection sequence that would finally result in a team of four.&lt;/p&gt;
&lt;p&gt;I screwed myself over on the first mock test by committing to a bad implementation method on a problem that was hard to get points on. My method seemed simple, but the memory usage leaked out in a way that was confusing and hard to patch; unfortunately, I tried to patch it in increasingly desperate and convoluted ways rather than scrapping the method, and thus missed out on many of the points elsewhere.&lt;/p&gt;
&lt;p&gt;During the second test I failed to read the last problem carefully and spent too much of my time on the second problem, once again missing out on a lot of relatively easy points. I had optimized and optimized and pushed my quadratic runtime down to linearithmic, which would allow me to get the points for the last subtask — or so I thought. But with 10 minutes left I had all but one testcase right, and after desperately rereading my code, I realized that I had a string comparison stuck in an inner loop that could make my runtime degenerate to quadratic if the input string had lots of the same digit. In order to have a solidly linearithmic algorithm, I would have to implement a &lt;a href=&#34;https://en.wikipedia.org/wiki/Suffix_array&#34;&gt;suffix array&lt;/a&gt;. Ten minutes? I gave up. (The problem setters told me afterwards that hashing would have worked too; I didn’t think of that at all. Oops.) I spent the 10 minutes reading the last problem and still failed to read it carefully. So that did not go very well.&lt;/p&gt;
&lt;p&gt;But, as the title probably gave away, during the third and fourth mock tests everything went much better than expected. :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adventures in Cabal Installations</title>
      <link>//blog.vero.site/post/cabal</link>
      <pubDate>Sun, 13 Apr 2014 15:51:16 +0800</pubDate>
      
      <guid>//blog.vero.site/post/cabal</guid>
      <description>&lt;p&gt;First Google Code Jam!&lt;/p&gt;
&lt;p&gt;The format of this competition, allowing us to run programs on our own machines, brought up a very interesting issue for me: what programming language should I be using? (I had had similar considerations for IPSC 2013, but GCJ’s problems are closer to the traditional ACM-ICPC style.)&lt;/p&gt;
&lt;p&gt;The obvious choice is C++, the language I use for roughly every other competition, but its safety (or lack thereof) is not very appealing. I need speed, but not &lt;em&gt;that much&lt;/em&gt; speed. Unfortunately I still haven’t gotten around to learning any other friendlier mid-level languages (on the list: D, Go, or Rust), so I have no close substitutes for C++ right now.&lt;/p&gt;
&lt;p&gt;Python is certainly available for a reliable arbitrary-length integer type, if nothing else.&lt;/p&gt;
&lt;p&gt;As for non-candidates, Java has &lt;code&gt;BigInteger&lt;/code&gt; and memory safety, but all in all I decided the benefits are too minor and it’s too ugly without operator overloading. Scala is probably way too slow. So I don’t expect to be writing either language.&lt;/p&gt;
&lt;p&gt;The only difficult choice I have to make is, of course, Haskell — which can be quite fast, even while it’s ridiculously type-safe and expressive and referentially transparent and easy to reason about, once you’ve:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;figured out how to do the problem&lt;/li&gt;
&lt;li&gt;scrapped step 1 and &lt;em&gt;actually&lt;/em&gt; figured out how to do the problem &lt;em&gt;functionally&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;gotten the thing to compile&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even if I can handle step 1, step 2 is by no means a simple task, as my struggle to implement a mere &lt;a href=&#34;//blog.vero.site/post/haskell&#34;&gt;Sieve of Eratosthenes&lt;/a&gt; efficiently shows. That is fun, but not at all intuitive; I am doubtful I can do this under contest conditions. It is extremely difficult to transfer my skills in learning how to implement, say, a segment tree or treap into this language.&lt;/p&gt;
&lt;p&gt;But! Google links to the &lt;a href=&#34;http://www.go-hero.net/jam/10/round/0&#34;&gt;programming language breakdown for 2010 Qualification Round&lt;/a&gt; as an example, and much to my surprise, Haskell ranks somewhere between sixth and tenth place in popularity (depending on what you sort by), so there are functional superprogrammers who can presumably do something like this.&lt;/p&gt;
&lt;p&gt;As it happens, I ended up implementing all four solutions to the qualification rounds in Haskell, because of the relaxed time limit and lack of any involved algorithms and data structures. I think it was worth it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Sands of Time</title>
      <link>//blog.vero.site/post/time</link>
      <pubDate>Tue, 31 Dec 2013 18:33:17 +0800</pubDate>
      
      <guid>//blog.vero.site/post/time</guid>
      <description>&lt;p&gt;Random video! Although I feel that I’ve heard it earlier, my first conscious memory of getting linked to it is from &lt;a href=&#34;http://usamoarchive.wordpress.com/2012/03/01/youre-older-than-youve-ever-been/&#34;&gt;this post&lt;/a&gt;. At first I thought it would be the right background music for this post, but upon further reflection I think it mainly suited me while I was writing this post. Well, it’s topical if you mentally replace “day” with “year”.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/q2bo_u_YmW8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Anyway. Around this time a year ago, I paused my participation in big high-school competitions, for a variety of reasons.&lt;/p&gt;
&lt;p&gt;Firstly, I stopped attempting to make IMO both because I wouldn’t get that much from the training and because other people ought to have the opportunity. I was concerned that I might condition myself to only be able to do math with the short-term motivation of contests. Better to focus on college math and maybe some original research, I thought. During the year, I did lots of the former and very little of the latter. Meh.&lt;/p&gt;
&lt;p&gt;As for the IOI, my obvious next target: I was tired of training and going abroad while paranoid about whether my immune system would hold up. I didn’t feel that the IOI was worth that. To some degree, I also felt burned out about programming. Long story short, my treatment should end soon, and learning Haskell completely resolved the burnout problem.&lt;/p&gt;
&lt;p&gt;But the most important reason, I think, was that “high school was too short”. I started math competitions ridiculously early and didn’t spend much time exploring other interests. I thought I knew myself well enough that I could say I didn’t have many more interests at all, but I was completely wrong (psych nerds will reflexively note this to be the &lt;a href=&#34;https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect&#34;&gt;Dunning-Kruger effect&lt;/a&gt;). I coded lots in weird languages — Haskell, as mentioned previously, plus Scala, plus all manner of other magical command line tools. I wrote my first math problem and submitted it officially, picked up a new instrument, went to a debate competition, served as an unimportant tech guy for MUN, discovered and became hooked on Pentatonix, participated in three puzzle hunts in Australia and one in Massachusetts, figured out my rough political stance, rode a boat, got retweeted by &lt;span class=&#34;citation&#34; data-cites=&#34;eevee&#34;&gt;@eevee&lt;/span&gt; and &lt;span class=&#34;citation&#34; data-cites=&#34;Kyrgyzstan_News&#34;&gt;@Kyrgyzstan_News&lt;/span&gt;, increased my Neopets™ fortune by over 3400%, and lurked on FurAffinity a little too much.&lt;/p&gt;
&lt;p&gt;But now, dear competition world, I’m back.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rankk Solving Statistics</title>
      <link>//blog.vero.site/post/rankk-stats</link>
      <pubDate>Thu, 18 Jul 2013 22:43:21 +0800</pubDate>
      
      <guid>//blog.vero.site/post/rankk-stats</guid>
      <description>&lt;p&gt;Funny, I go on a trip to Penghu followed by a four-day science camp and also get dragged into drawing classes and some sort of movie advising joint, and this is what I decide to blog about.&lt;/p&gt;
&lt;p&gt;Since it’s summer, I went back to &lt;a href=&#34;http://www.rankk.org/&#34;&gt;Rankk&lt;/a&gt; and solved stuff. This is lots of fun if you’re good with computers, plus a little math, cryptography, and general puzzling. I’m still stuck on level 8… oh well. Since the levels didn’t seem very indicative of difficulty to me, I decided to do some analysis.&lt;/p&gt;
&lt;p&gt;New challenges have been added to Rankk over time, so my metric of difficulty is the number of solvers divided by the time from release to now. Of course this is far from perfect; for example, a challenge’s author doesn’t always seem consistently counted as a solver, problems with lower numbers and problems that will help level up are more likely to get checked out by new rankkers, and so on. But this is just for fun.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Haskell and Primes</title>
      <link>//blog.vero.site/post/haskell</link>
      <pubDate>Sat, 25 May 2013 23:03:05 +0800</pubDate>
      
      <guid>//blog.vero.site/post/haskell</guid>
      <description>&lt;blockquote&gt;
“I have been told that any encryption becomes safer if the underlying algorithm is maximally obscured, what is most conveniently done by coding it in Haskell.” – rankk
&lt;/blockquote&gt;
&lt;p&gt;Functional programming is terribly addicting! Partly I think the completely different way of thinking makes it feel like learning programming, and falling in love with it, all over again. Partly there’s this evil sense of satisfaction from using &lt;code&gt;$&lt;/code&gt;s (and later &lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt;s and &lt;code&gt;=&amp;lt;&amp;lt;&lt;/code&gt;s and &lt;code&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/code&gt;s) to improve readability for initiated Haskellers and worsen it for everybody else. Partly it’s because &lt;a href=&#34;http://learnyouahaskell.com/&#34;&gt;&lt;i&gt;Learn You a Haskell for Great Good!&lt;/i&gt;&lt;/a&gt; is such a fun read — there are too many funny bits to list but my favorite so far is when the author analyzes the first verse of Avril Lavigne’s &lt;em&gt;Girlfriend&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Although I think my code in Haskell tends to be more readable than in other languages, code obfuscation in Haskell is almost natural: all you have to do is refactor the wrong function to be “pointfree”, which means that even though it’s a function that takes arguments, you define it without parameters by manipulating and joining a bunch of other functions. Example (plus a few other tiny obfuscations):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;isPrime &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; liftA2 (&lt;span class=&#34;op&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;) (liftA2 (&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;all&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; ((&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;) (&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;/=&lt;/span&gt;)) &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;rem&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;flip&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;takeWhile&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;flip&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; liftA2 (&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;&amp;gt;=&lt;/span&gt;))) ((&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;) &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;QQ wordpress why no Haskell highlighting &lt;ins&gt;(Editor’s note from 2017: The migration should highlight this now!)&lt;/ins&gt;&lt;/p&gt;
&lt;p&gt;Also, for some reason, you can do this in Haskell:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(via &lt;a href=&#34;http://www.yellosoft.us/evilgenius/&#34;&gt;Haskell for the Evil Genius&lt;/a&gt;)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Okay, but seriously now. I wrote this about my journey to learn functional programming in the &lt;a href=&#34;//blog.vero.site/post/programming&#34;&gt;programming babble post&lt;/a&gt; half a year ago:&lt;/p&gt;
&lt;blockquote&gt;
The main obstacle I have is that it’s hard to optimize or get asymptotics when computation is expensive (a big problem if you’re trying to learn through Project Euler problems, particularly ones with lots of primes).
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Example &#34;BetaWorldProblems&#34;</title>
      <link>//blog.vero.site/post/problems</link>
      <pubDate>Sat, 20 Apr 2013 11:51:06 +0800</pubDate>
      
      <guid>//blog.vero.site/post/problems</guid>
      <description>&lt;p&gt;because my title needs to mean something. &lt;ins date=&#34;2019-02-05T18:08:23-0500&#34;&gt;(note from the future: before late 2017, when I &lt;a href=&#34;//blog.vero.site/post/hello-again&#34;&gt;migrated to Hugo and GitHub Pages&lt;/a&gt;, the blog was called “BetaWorldProblems”.)&lt;/ins&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google Reader Powering Down</title>
      <link>//blog.vero.site/post/google-reader-powering-down</link>
      <pubDate>Thu, 14 Mar 2013 20:35:09 +0800</pubDate>
      
      <guid>//blog.vero.site/post/google-reader-powering-down</guid>
      <description>&lt;p&gt;Google just announced &lt;a href=&#34;http://googlereader.blogspot.tw/2013/03/powering-down-google-reader.html&#34;&gt;it’s shutting down Google Reader&lt;/a&gt; in three and a half months… I am participating in the friendly Reddit DDoS-hug of all the alternatives (&lt;a href=&#34;http://www.reddit.com/r/AskReddit/comments/1a8zgj/what_are_some_good_web_rss_readers_to_replace/c8v71t5&#34;&gt;list&lt;/a&gt;, but scroll around in the thread for a few more). Darn.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adventures in Scala Pseudo-Abuse</title>
      <link>//blog.vero.site/post/scala</link>
      <pubDate>Thu, 21 Feb 2013 22:01:25 +0800</pubDate>
      
      <guid>//blog.vero.site/post/scala</guid>
      <description>&lt;p&gt;So, what have I been doing with programming recently?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt; is an amazing multiparadigm programming language that runs on the Java Virtual Machine and interoperates with Java. I learned about it last time reading random articles on Twitter.&lt;/p&gt;
&lt;p&gt;When I say “amazing” I mean “This is a language in which my code gives me nerdgasms every time I read it.” Wheeee.&lt;/p&gt;
&lt;p&gt;Okay, it’s not perfect. People say it’s too academic. It has a notoriously complicated type system (which is &lt;a href=&#34;http://scientopia.org/blogs/goodmath/2013/01/21/types-gone-wild-ski-at-compile-time/&#34;&gt;&lt;em&gt;Turing-Complete&lt;/em&gt; at compile time&lt;/a&gt;). Its documentation is a bit patchy too. For a serious introduction, the Scala website has plenty of links under documentation, and a &lt;a href=&#34;http://www.scala-lang.org/node/104&#34;&gt;tour of features&lt;/a&gt;. Somebody wrote &lt;a href=&#34;http://www.naildrivin5.com/scalatour&#34;&gt;another tour&lt;/a&gt; that explains things a bit more. So here, instead of introducing it seriously, I’m just going to screw with its features.&lt;/p&gt;
&lt;p&gt;Example of freedom. Scala lets names consist of symbols, and treats one-parameter methods and infix operators exactly the same. The full tokenization rules are a bit detailed and I put them at the bottom of this post for the interested. This lets you create classes with arithmetic and domain-specific languages easily, but it also creates some silly opportunities:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode scala&#34;&gt;&lt;code class=&#34;sourceCode scala&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;scala&amp;gt; &lt;span class=&#34;kw&#34;&gt;val&lt;/span&gt; * = &lt;span class=&#34;dv&#34;&gt;12&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;*: Int = &lt;span class=&#34;dv&#34;&gt;12&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;scala&amp;gt; * * * * *&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;res0: Int = &lt;span class=&#34;dv&#34;&gt;1728&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Now on GitHub!</title>
      <link>//blog.vero.site/post/github</link>
      <pubDate>Sat, 09 Feb 2013 22:54:34 +0800</pubDate>
      
      <guid>//blog.vero.site/post/github</guid>
      <description>Yay?
Right now I feel about this a lot like I felt about getting Twitter. Nobody I know personally is there, but all the “famous” “technological” people are, and something like 90% of the open-source projects I bump into are too.
Just like Twitter, I barely know how to use Git either, but that’s okay. For version control I’m going all command-line now! Last time I tried to link stuff up with Eclipse everything exploded, but after I ran git init from the terminal this time, it’s highlighting things red and green everywhere like it’s suddenly begging me not to forsake it for the command line.</description>
    </item>
    
    <item>
      <title>Ridiculously Long-Winded Programming Babble</title>
      <link>//blog.vero.site/post/programming</link>
      <pubDate>Sun, 16 Dec 2012 22:08:28 +0800</pubDate>
      
      <guid>//blog.vero.site/post/programming</guid>
      <description>&lt;p&gt;Okay I don’t actually know how this pointless rambling got so long. I know the longer it is the more people will just tend to skim, because I do that all the time. So I went back and refactored—er, rewrote all the somewhat tangential bits (wow these puns are too easy) into footnotes. Manually. Obviously if I have to do this again I’ll write a script for it. But the post is still really long, and I bet nobody will read the whole thing. Oh well.&lt;/p&gt;
&lt;p&gt;Life updates: I got out of the hospital Friday two-and-a-half weeks ago, went to the preliminaries of NPSC (a national team programming contest) with classmates, threw up a lot, went back into the hospital, and came out again. I wrote a lot of stuff about the experience and how much it sucked (hint: &lt;em&gt;a lot&lt;/em&gt;) when I started this draft around that time, but now putting so much detail in this post feels weird. I’m mostly good now.&lt;/p&gt;
&lt;p&gt;Three years ago NPSC was the only programming contest I really knew of; now I’ve participated in quite a few more, both online and locally, but it’s still the only contest I’ve entered that gives you real-time verdicts. I believe it inherits this from being modeled after ACM-ICPC, but that’s for college people and I’m less clear on how it works. All the other contests, namely &lt;a href=&#34;https://www.topcoder.com/&#34;&gt;TopCoder&lt;/a&gt;, &lt;a href=&#34;http://www.codeforces.com/&#34;&gt;CodeForces&lt;/a&gt;, &lt;a href=&#34;http://usaco.org/&#34;&gt;USACO&lt;/a&gt;, and the other local individual competition (there doesn’t appear to be an English name so for the purpose of this post I’ll just call it “Nameless Local”; there’s a nation-wide competition in one-and-a-half weeks!), have system tests after the contest that don’t allow you to resubmit afterwards.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; They all give pretests that you get to know about right away, just to catch super-silly non-algorithmic mistakes like failing to remove the debug statements or reading input from the wrong place, but these contain weak test cases and don’t guarantee that the solution will pass the system tests and get full score.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gridderface 0.5</title>
      <link>//blog.vero.site/post/gridderface-0-5</link>
      <pubDate>Tue, 27 Nov 2012 17:53:13 +0800</pubDate>
      
      <guid>//blog.vero.site/post/gridderface-0-5</guid>
      <description>Okay, I give up. Here it is: Gridderface is a (quoting the project description, which I wrote anyway so whatever) “keyboard inferface for marking grid-based puzzles in Java” that I’ve been working on for too long. It is open-source under the GPL v3.
Basically, it’s a thing you can paste logic puzzle images into to solve them in, like people do in Paint, when you can’t or don’t want to print them.</description>
    </item>
    
    <item>
      <title>Adventures in Meta-Debugging</title>
      <link>//blog.vero.site/post/debug</link>
      <pubDate>Mon, 05 Nov 2012 22:28:39 +0800</pubDate>
      
      <guid>//blog.vero.site/post/debug</guid>
      <description>&lt;p&gt;Okay did I mention how I sucked at the command line? This is part of the journey towards stopping. Yes, I’m on a Mac and it’s not very *nix-y in some ways but it’s enough for me for now.&lt;/p&gt;
&lt;p&gt;Today’s story starts when I learned about &lt;a href=&#34;https://www.gnu.org/software/gdb/&#34;&gt;&lt;code&gt;gdb&lt;/code&gt;&lt;/a&gt;, the pure-command-line GNU Debugger, which is incredibly cool. I have tried and failed to learn how to use the debug function on many of my IDEs; I found shotgunning &lt;code&gt;printf&lt;/code&gt; statements as needed faster. This may well be the first time I found a command-line tool so much more intuitive than the GUI-equipped programs. Wow.&lt;/p&gt;
&lt;p&gt;Then I learned that for some reason the &lt;code&gt;gdb&lt;/code&gt; on this computer was 6.3, which is 1.2~1.5 major versions behind (depending on how you count) and missing a frustrating amount of features. (The one that the current Code::Blocks installer installs is also something like 6.4. Blech.)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Technological Fails Continue</title>
      <link>//blog.vero.site/post/technological-fails-continue</link>
      <pubDate>Wed, 15 Feb 2012 22:11:00 +0800</pubDate>
      
      <guid>//blog.vero.site/post/technological-fails-continue</guid>
      <description>&lt;div class=&#34;warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: My 2012 self wrote this. It is preserved for historical interest and amusement, and does not reflect my current beliefs or attitudes.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Hardware:&lt;/p&gt;
&lt;p&gt;The laptop I’m typing this on is over two years old. This is not a lot by some measures, but weird spontaneous glitches are starting to accumulate to the point where they’re getting on my nerves. The internet card still needs an extra reset to start working half the time, and occasionally warrants a full reboot, which costs five minutes. The USB ports are loopy, some windows just show up black when they feel like it, and there’s a steadily climbing whir in the background. I’m kind of anticipating the moment the whole thing just drops dead.&lt;/p&gt;
&lt;p&gt;Well, I’m not about to run out of computers to use (there’s a noisy XP desktop that also barely works despite handling all our print jobs, but also one spanking new eight-core CPU laptop, which Dad considered a valuable enough investment (?)) but such a loss is still not something to be dismissed lightly. And the externalized cost is far more important and chilling. Who knows how many kids in the Congo had to mine coltan, or how much conflict has occurred over the crude oil, or what awful conditions those sweatshop-assembly workers are going through? Annie Leonard’s words still resonate with me from when we were first shown the video a year ago. Which is more recent than this laptop, so that doesn’t mean that much. I think a couple months ago I would have absolutely no second thoughts about getting a new one, though. Yup, I’m in a quandary (ha ha vocabulary) on the balance between desensitization and compulsive hoarding of stuff.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adventures in Crappy Markup</title>
      <link>//blog.vero.site/post/crappy-markup</link>
      <pubDate>Fri, 10 Feb 2012 21:39:00 +0800</pubDate>
      
      <guid>//blog.vero.site/post/crappy-markup</guid>
      <description>There are two big elementary and middle school competitions around this part of the globe. Well, “big” according to “I’ve heard of it”, which is by no means an accurate measure of, well, anything. I don’t go out of my way to look for them any more, even though… hold on, am I still eligible? Whatever. But in any case, diverting any unnecessary energy from the olympiad-proof-training is probably not a good idea now.</description>
    </item>
    
    <item>
      <title>Technological Fails</title>
      <link>//blog.vero.site/post/technological-fails</link>
      <pubDate>Sun, 20 Dec 2009 18:05:00 +0800</pubDate>
      
      <guid>//blog.vero.site/post/technological-fails</guid>
      <description>&lt;div class=&#34;warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: My 2009 self wrote this (except for the insertions by my 2013 self). It is preserved for historical interest and amusement, and does not reflect my current beliefs or attitudes.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Strange things:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Color</title>
      <link>//blog.vero.site/ref/color</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//blog.vero.site/ref/color</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.brucelindbloom.com/&#34;&gt;Bruce Lindbloom&lt;/a&gt; has a ton of equations, but I just want the big ones on one page. We’ll assume &lt;a href=&#34;https://en.wikipedia.org/wiki/SRGB&#34;&gt;sRGB&lt;/a&gt;, which implies using &lt;a href=&#34;https://en.wikipedia.org/wiki/Illuminant_D65&#34;&gt;D65&lt;/a&gt; as white (if you’re using Bruce Lindbloom’s calculator to check your implementation, make sure to set these).&lt;/p&gt;
&lt;h3 id=&#34;rgb-linear-rgb&#34;&gt;RGB ↔ Linear RGB&lt;/h3&gt;
&lt;p&gt;Let &lt;span class=&#34;math inline&#34;&gt;\(\Xi\)&lt;/span&gt; (one of &lt;span class=&#34;math inline&#34;&gt;\(R\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(G\)&lt;/span&gt;, and &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;) be an RGB component in the range &lt;span class=&#34;math inline&#34;&gt;\([0, 1]\)&lt;/span&gt;. (This is an obnoxious variable choice, but I’m trying to not overload any variable names in this entire post.) If you have RGB values in &lt;span class=&#34;math inline&#34;&gt;\([0, 255]\)&lt;/span&gt;, divide them by 255. It can be converted to/from the &lt;strong&gt;linearized component&lt;/strong&gt; &lt;span class=&#34;math inline&#34;&gt;\(\xi\)&lt;/span&gt; (one of &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt;, and &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;) as:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\xi = \begin{cases} \Xi/12.92 &amp;amp; \text{if }\Xi \leq 0.04045 \\ ((\Xi + 0.055)/1.055)^{2.4} &amp;amp; \text{if }\Xi &amp;gt; 0.04045 \end{cases}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\Xi = \begin{cases} 12.92\xi &amp;amp; \text{if }\xi \leq 0.0031308 \\ 1.055v^{1/2.4} - 0.055 &amp;amp; \text{if }\xi &amp;gt; 0.0031308 \end{cases}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This is called “companding”.&lt;/p&gt;
&lt;p&gt;However, you can use &lt;span class=&#34;math inline&#34;&gt;\(\xi = \Xi^{2.4}\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\Xi = \xi^{1/2.4}\)&lt;/span&gt; in a pinch.&lt;/p&gt;
&lt;h3 id=&#34;linear-rgb-xyz&#34;&gt;Linear RGB ↔ XYZ&lt;/h3&gt;
&lt;p&gt;Convert between XYZ and linearized RGB. Again, this assumes sRGB and D65.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{align*}
X &amp;amp;= 0.4124564r + 0.3575761g + 0.1804375b \\
Y &amp;amp;= 0.2126729r + 0.7151522g + 0.0721750b \\
Z &amp;amp;= 0.0193339r + 0.1191920g + 0.9503041b
\end{align*}\]&lt;/span&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Coq Reference</title>
      <link>//blog.vero.site/ref/coq</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//blog.vero.site/ref/coq</guid>
      <description>&lt;p&gt;It seems like a rite of passage to create one of these because there are so many Coq tactic cheat sheets out there and there’s just so much to learn. Here’s mine.&lt;/p&gt;
&lt;p&gt;This is mostly about tactics but I realized not really.&lt;/p&gt;
&lt;p&gt;Links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://coq.inria.fr/refman/proof-engine/tactics.html&#34;&gt;Coq Tactics&lt;/a&gt;. Authoritative but dense.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://softwarefoundations.cis.upenn.edu/lf-current/index.html&#34;&gt;Logical Foundations&lt;/a&gt; (Software Foundations Volume 1). I think the order of ideas makes pedagogical sense but also makes it hard for me to look up particular tactics or concepts.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Other Coq cheat sheets found by Googling “Coq cheat sheets”:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pjreddie.com/coq-tactics/&#34;&gt;Coq Tactics Index&lt;/a&gt; (Joseph Redmon)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.cornell.edu/courses/cs3110/2018sp/a5/coq-tactics-cheatsheet.html&#34;&gt;Coq Tactics Cheatsheet&lt;/a&gt; (Cornell CS3110)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://adam.chlipala.net/itp/tactic-reference.html&#34;&gt;Coq Tactics Quick Reference&lt;/a&gt; (Adam Chlipala) / the &lt;a href=&#34;http://adam.chlipala.net/frap/&#34;&gt;Formal Reasoning About Programs&lt;/a&gt; book also has a nice appendix&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cis.upenn.edu/~rrand/popl_2016/reference.html&#34;&gt;Coq Tactics&lt;/a&gt; (UPenn ???)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Meta-notes: I cover a lot of weak tactics because I like knowing exactly what my tools are doing. I try to use the variants of tactics that explicitly name things produced when possible. I am sure there is nomenclature I don’t understand precisely and use sloppily in this list; I am also sloppy with metavariables. Even things that are correct might be horrible style. There are likely other errors and omissions. They might be fixed one day. I’m putting this up nevertheless because it’s personally useful.&lt;/p&gt;
&lt;h3 id=&#34;things-i-wish-i-knew-but-didnt-learn-from-software-foundations-or-coq-tactic-cheat-sheets&#34;&gt;Things I wish I knew but didn’t learn from Software Foundations or Coq tactic cheat sheets&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The first two sections are not about tactics per se but how to find theorems to use and how to use them. Knowing how to use all of these query commands is super useful.&lt;/li&gt;
&lt;li&gt;To clean up repeating subexpressions with “local variables”, I find &lt;code&gt;remember expr as X eqn:Hname.&lt;/code&gt; easier to work with than &lt;code&gt;set (X := expr).&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pose proof expr as Hname.&lt;/code&gt; adds &lt;code&gt;expr&lt;/code&gt; to the context, with name &lt;code&gt;Hname&lt;/code&gt;. Modus ponens where you know &lt;code&gt;H1&lt;/code&gt; and &lt;code&gt;H2&lt;/code&gt;, which is “&lt;code&gt;H1&lt;/code&gt; implies &lt;code&gt;H3&lt;/code&gt;”, is just &lt;code&gt;pose proof (H2 H1) as H3&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Software Foundations covers bullets and curly braces early, but I like subgoal specification with &lt;code&gt;1:&lt;/code&gt;, &lt;code&gt;2:&lt;/code&gt; etc., which can really help limit nesting depth. &lt;code&gt;2: (tactic that solves subgoal 2).&lt;/code&gt; If you want more bullets, there are infinitely many, not just three. After &lt;code&gt;-&lt;/code&gt; &lt;code&gt;+&lt;/code&gt; &lt;code&gt;*&lt;/code&gt; you can use &lt;code&gt;--&lt;/code&gt; &lt;code&gt;++&lt;/code&gt; &lt;code&gt;**&lt;/code&gt; &lt;code&gt;---&lt;/code&gt; etc.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>diagrams Reference</title>
      <link>//blog.vero.site/ref/diagrams</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//blog.vero.site/ref/diagrams</guid>
      <description>&lt;p&gt;&lt;code&gt;&lt;a href=&#34;https://diagrams.github.io/&#34;&gt;diagrams&lt;/a&gt;&lt;/code&gt; is a nifty Haskell library for making vector diagrams. I keep coming back to it to generate graphics for puzzles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the very old &lt;a href=&#34;https://blog.vero.site/post/signature-puzzle&#34;&gt;A Signature Puzzle&lt;/a&gt; from this blog&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dp.puzzlehunt.net/puzzle/a-fork-in-the-road.html&#34;&gt;A Fork in the Road&lt;/a&gt; (DP Puzzle Hunt)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://2020.galacticpuzzlehunt.com/puzzle/symbols&#34;&gt;Symbols&lt;/a&gt; (Galactic Puzzle Hunt 2020)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://silphpuzzlehunt.com/puzzle/a-lot-of-research&#34;&gt;A Lot of Research into Things That Have Very Little Meaning&lt;/a&gt; (Silph Puzzle Hunt)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I got sick of relearning it every time, and I think there’s some small chance other people will find it useful too, so I wrote something up. This post is a sort of reference that tries to compromise between the &lt;a href=&#34;https://diagrams.github.io/doc/quickstart.html&#34;&gt;quick start tutorial&lt;/a&gt; and &lt;a href=&#34;https://diagrams.github.io/doc/manual.html&#34;&gt;manual&lt;/a&gt; on one hand, and the API reference on the other, to try to be deeper and more comprehensive than the former, but also flow better and be easier to navigate than the latter. Some types are just really intimidating when fully written out…&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;circle ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TrailLike&lt;/span&gt; t, &lt;span class=&#34;dt&#34;&gt;V&lt;/span&gt; t &lt;span class=&#34;op&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;V2&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;N&lt;/span&gt; t &lt;span class=&#34;op&#34;&gt;~&lt;/span&gt; n, &lt;span class=&#34;dt&#34;&gt;Transformable&lt;/span&gt; t) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; t&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To avoid unhelpfully generic types, I will deal concretely with two-dimensional diagrams that measure everything in &lt;code&gt;Double&lt;/code&gt;, and will frequently abbreviate complex types with an asterisk, like I will write &lt;code&gt;V2*&lt;/code&gt; for &lt;code&gt;V2 Double&lt;/code&gt;. I will introduce these aliases along the way for easy greppability. They’re not legal Haskell, of course.&lt;/p&gt;
&lt;p&gt;This reference assumes basic-to-intermediate Haskell knowledge. Some of the more intermediate stuff includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monoids, and that the Haskell &lt;code&gt;Monoid&lt;/code&gt; operator is &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Typeclasses. I will sometimes write fake type signatures as abbreviations for typeclass restrictions: for example, &lt;code&gt;TrailLike&lt;/code&gt; is a typeclass, and I might say or write that a function returns &lt;code&gt;TrailLike&lt;/code&gt; when I really mean &lt;code&gt;TrailLike t =&amp;gt; t&lt;/code&gt;, any type &lt;code&gt;t&lt;/code&gt; that is in that typeclass.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;van Laarhoven lenses may help, but mostly I’ll try to black-box them.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Haskell Stash</title>
      <link>//blog.vero.site/ref/hs</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//blog.vero.site/ref/hs</guid>
      <description>&lt;p&gt;Editor’s note: This is almost certainly years out of date. cabal has v2 commands and stuff now? Sorry.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>init</title>
      <link>//blog.vero.site/ref/init</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//blog.vero.site/ref/init</guid>
      <description>&lt;h2 id=&#34;section&#34;&gt;1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mozilla.org/en-US/firefox/new/&#34;&gt;&lt;strong&gt;Firefox&lt;/strong&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://www.proginosko.com/leechblock.html#SECT2&#34;&gt;LeechBlock&lt;/a&gt;, &lt;a href=&#34;https://download.xmarks.com/download&#34;&gt;Xmarks&lt;/a&gt;&lt;/strong&gt;, &lt;a href=&#34;https://www.eff.org/https-everywhere&#34;&gt;HTTPS Everywhere&lt;/a&gt;, &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/ublock-origin/&#34;&gt;uBlock Origin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Formerly: &lt;a href=&#34;http://5digits.org/pentadactyl/&#34;&gt;Pentadactyl&lt;/a&gt; (&lt;a href=&#34;http://5digits.org/nightlies&#34;&gt;nightlies&lt;/a&gt;), &lt;a href=&#34;https://lastpass.com/misc_download2.php&#34;&gt;LastPass&lt;/a&gt;, &lt;a href=&#34;https://disconnect.me/&#34;&gt;Disconnect&lt;/a&gt;, &lt;a href=&#34;http://firefox.exxile.net/aios/&#34;&gt;All-in-One Sidebar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dropbox.com/&#34;&gt;&lt;strong&gt;Dropbox&lt;/strong&gt;&lt;/a&gt; (&lt;code&gt;&lt;a href=&#34;http://db.tt/&#34;&gt;db.tt&lt;/a&gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(g)&lt;a href=&#34;http://www.vim.org/&#34;&gt;Vim&lt;/a&gt;&lt;/strong&gt; / &lt;a href=&#34;https://github.com/macvim-dev/macvim&#34;&gt;MacVim&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Shougo/neobundle.vim&#34;&gt;NeoBundle&lt;/a&gt;; &lt;a href=&#34;https://github.com/nanotech/jellybeans.vim&#34;&gt;jellybeans&lt;/a&gt;, &lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;syntastic&lt;/a&gt;&lt;/strong&gt;, airline, fugitive, unite.vim, nerdtree, …&lt;/li&gt;
&lt;li&gt;Make sure you change your home folder and other paths in your &lt;code&gt;.vimrc&lt;/code&gt; if necessary.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.videolan.org/vlc/&#34;&gt;VLC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ankisrs.net/&#34;&gt;Anki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.geogebra.org/&#34;&gt;Geogebra&lt;/a&gt;, &lt;a href=&#34;http://db-maths.nuxit.net/CaRMetal/index_en.html&#34;&gt;CaRMetal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://osu.ppy.sh/p/download&#34;&gt;osu!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ccxvii.net/gargoyle/&#34;&gt;Gargoyle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://musescore.org/en&#34;&gt;MuseScore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.utorrent.com/&#34;&gt;μTorrent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://veracrypt.codeplex.com/&#34;&gt;VeraCrypt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gyazo.com/&#34;&gt;Gyazo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Java Clipboards and Data Transfer</title>
      <link>//blog.vero.site/ref/java-clipboards</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//blog.vero.site/ref/java-clipboards</guid>
      <description>&lt;p&gt;(Ported from betaveros.stash. Wow, I get syntax highlighting and footnotes! Probably years out of date though. I probably wrote this somewhere in 2012–2014, but am editing this parenthetical in 2021.)&lt;/p&gt;
&lt;p&gt;A quick brief guide. At least, that’s how I planned it.&lt;/p&gt;
&lt;p&gt;A lot of stuff is in the package &lt;code&gt;java.awt.datatransfer&lt;/code&gt;. Class &lt;code&gt;Toolkit&lt;/code&gt; is in &lt;code&gt;java.awt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Some basic classes. The class &lt;code&gt;Clipboard&lt;/code&gt; is a clipboard, obviously. Its content is/will be an instance of the class &lt;code&gt;Transferable&lt;/code&gt;. Some content can be read as different types of objects depending on what you want; to choose which type you use an instance of &lt;code&gt;DataFlavor&lt;/code&gt;. It provides three basic ones: &lt;code&gt;DataFlavor.imageFlavor&lt;/code&gt;, &lt;code&gt;DataFlavor.javaFileListFlavor&lt;/code&gt;, and &lt;code&gt;DataFlavor.stringFlavor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Okay, now step by step. This is the low-level method.&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;Get the default clipboard with &lt;code&gt;Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Get a transferable with &lt;code&gt;Transferable content = clipboard.getContents(null);&lt;/code&gt; &lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Check if &lt;code&gt;content&lt;/code&gt; can be read as the kind of object you want with &lt;code&gt;(content != null) &amp;amp;&amp;amp; content.isDataFlavorSupported(someFlavor)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If it does, get the object with &lt;code&gt;content.getTransferData(someFlavor)&lt;/code&gt; &lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you just want a quick-and-dirty function:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode java&#34;&gt;&lt;code class=&#34;sourceCode java&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;dt&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;getClipboard&lt;/span&gt;()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;        &lt;span class=&#34;kw&#34;&gt;throws&lt;/span&gt; java.&lt;span class=&#34;fu&#34;&gt;awt&lt;/span&gt;.&lt;span class=&#34;fu&#34;&gt;datatransfer&lt;/span&gt;.&lt;span class=&#34;fu&#34;&gt;UnsupportedFlavorException&lt;/span&gt;, &lt;span class=&#34;bu&#34;&gt;IOException&lt;/span&gt; {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; (&lt;span class=&#34;bu&#34;&gt;String&lt;/span&gt;) java.&lt;span class=&#34;fu&#34;&gt;awt&lt;/span&gt;.&lt;span class=&#34;fu&#34;&gt;Toolkit&lt;/span&gt;.&lt;span class=&#34;fu&#34;&gt;getDefaultToolkit&lt;/span&gt;()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;        .&lt;span class=&#34;fu&#34;&gt;getSystemClipboard&lt;/span&gt;()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;        .&lt;span class=&#34;fu&#34;&gt;getData&lt;/span&gt;(java.&lt;span class=&#34;fu&#34;&gt;awt&lt;/span&gt;.&lt;span class=&#34;fu&#34;&gt;datatransfer&lt;/span&gt;.&lt;span class=&#34;fu&#34;&gt;DataFlavor&lt;/span&gt;.&lt;span class=&#34;fu&#34;&gt;stringFlavor&lt;/span&gt;);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Stash</title>
      <link>//blog.vero.site/ref/stash</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//blog.vero.site/ref/stash</guid>
      <description>&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ex&#34;&gt;rustc&lt;/span&gt; -C prefer-dynamic&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode css&#34;&gt;&lt;code class=&#34;sourceCode css&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;.meter-text&lt;/span&gt; { &lt;span class=&#34;kw&#34;&gt;white-space&lt;/span&gt;: &lt;span class=&#34;dv&#34;&gt;pre-wrap&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt; }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ex&#34;&gt;launchctl&lt;/span&gt; stop com.apple.pboard&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;launchctl&lt;/span&gt; start com.apple.pboard&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;# requires ImageMagick&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt; img()&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;    &lt;span class=&#34;ex&#34;&gt;identify&lt;/span&gt; -format &lt;span class=&#34;st&#34;&gt;&amp;#39;&amp;lt;img src=&amp;quot;%f&amp;quot; width=&amp;quot;%w&amp;quot; height=&amp;quot;%h&amp;quot; /&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;$1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
