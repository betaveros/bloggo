<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Bounded-Error Log</title>
    <link>//blog.vero.site/tag/python</link>
    <description>Recent content in python on Bounded-Error Log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 May 2015 23:24:11 +0800</lastBuildDate>
    
	<atom:link href="//blog.vero.site/tag/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Adventures in Unicode Forensics</title>
      <link>//blog.vero.site/post/unicode-forensics</link>
      <pubDate>Sun, 17 May 2015 23:24:11 +0800</pubDate>
      
      <guid>//blog.vero.site/post/unicode-forensics</guid>
      <description>What do you do when you get a bunch of files like this from a zipfile?
   I’ve blurred the messed-up file names because I’m not convinced it’s impossible to reconstruct the Chinese names of people from them and I’d rather err towards being paranoid about privacy. Except for the one file name whose author’s identity I’m OK with disclosing.   Back story: I have been tasked with collecting everybody’s Chinese assignments for this semester.</description>
    </item>
    
    <item>
      <title>#pyconapac2014</title>
      <link>//blog.vero.site/post/pycon</link>
      <pubDate>Tue, 20 May 2014 22:26:53 +0800</pubDate>
      
      <guid>//blog.vero.site/post/pycon</guid>
      <description>&lt;p&gt;Late post. As usual.&lt;/p&gt;
&lt;p&gt;It started with an online competition — write programs, solve problems, get points. I wouldn’t call the problems easy, but they weren’t hard either. So I solved all of them. To make it even less impressive, only about twenty people submitted anything at all.&lt;/p&gt;
&lt;p&gt;But the result was just what it was: I ended up with a free ticket to &lt;a href=&#34;https://tw.pycon.org/2014apac/en/&#34;&gt;PyCon APAC 2014&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’d prefer a conference about a more functional programming language, but I’ll take what I get. Another adventure!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Haskell and Primes</title>
      <link>//blog.vero.site/post/haskell</link>
      <pubDate>Sat, 25 May 2013 23:03:05 +0800</pubDate>
      
      <guid>//blog.vero.site/post/haskell</guid>
      <description>&lt;blockquote&gt;
“I have been told that any encryption becomes safer if the underlying algorithm is maximally obscured, what is most conveniently done by coding it in Haskell.” – rankk
&lt;/blockquote&gt;
&lt;p&gt;Functional programming is terribly addicting! Partly I think the completely different way of thinking makes it feel like learning programming, and falling in love with it, all over again. Partly there’s this evil sense of satisfaction from using &lt;code&gt;$&lt;/code&gt;s (and later &lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt;s and &lt;code&gt;=&amp;lt;&amp;lt;&lt;/code&gt;s and &lt;code&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/code&gt;s) to improve readability for initiated Haskellers and worsen it for everybody else. Partly it’s because &lt;a href=&#34;http://learnyouahaskell.com/&#34;&gt;&lt;i&gt;Learn You a Haskell for Great Good!&lt;/i&gt;&lt;/a&gt; is such a fun read — there are too many funny bits to list but my favorite so far is when the author analyzes the first verse of Avril Lavigne’s &lt;em&gt;Girlfriend&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Although I think my code in Haskell tends to be more readable than in other languages, code obfuscation in Haskell is almost natural: all you have to do is refactor the wrong function to be “pointfree”, which means that even though it’s a function that takes arguments, you define it without parameters by manipulating and joining a bunch of other functions. Example (plus a few other tiny obfuscations):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;isPrime &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; liftA2 (&lt;span class=&#34;fu&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;) (liftA2 (&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;) (all &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; ((&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;) (&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;/=&lt;/span&gt;)) &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; rem) (flip&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;    takeWhile [&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;] &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; (flip (&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; liftA2 (&lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt;) id id) &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;&amp;gt;=&lt;/span&gt;))) ((&lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt;) &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;QQ wordpress why no Haskell highlighting &lt;ins&gt;(Editor’s note from 2017: The migration should highlight this now!)&lt;/ins&gt;&lt;/p&gt;
&lt;p&gt;Also, for some reason, you can do this in Haskell:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;ghci&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(via &lt;a href=&#34;http://www.yellosoft.us/evilgenius/&#34;&gt;Haskell for the Evil Genius&lt;/a&gt;)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Okay, but seriously now. I wrote this about my journey to learn functional programming in the &lt;a href=&#34;//blog.vero.site/post/programming&#34;&gt;programming babble post&lt;/a&gt; half a year ago:&lt;/p&gt;
&lt;blockquote&gt;
The main obstacle I have is that it’s hard to optimize or get asymptotics when computation is expensive (a big problem if you’re trying to learn through Project Euler problems, particularly ones with lots of primes).
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Example &#34;BetaWorldProblems&#34;</title>
      <link>//blog.vero.site/post/problems</link>
      <pubDate>Sat, 20 Apr 2013 11:51:06 +0800</pubDate>
      
      <guid>//blog.vero.site/post/problems</guid>
      <description>&lt;p&gt;because my title needs to mean something. &lt;ins date=&#34;2019-02-05T18:08:23-0500&#34;&gt;(note from the future: before late 2017, when I &lt;a href=&#34;//blog.vero.site/post/hello-again&#34;&gt;migrated to Hugo and GitHub Pages&lt;/a&gt;, the blog was called “BetaWorldProblems”.)&lt;/ins&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ridiculously Long-Winded Programming Babble</title>
      <link>//blog.vero.site/post/programming</link>
      <pubDate>Sun, 16 Dec 2012 22:08:28 +0800</pubDate>
      
      <guid>//blog.vero.site/post/programming</guid>
      <description>&lt;p&gt;Okay I don’t actually know how this pointless rambling got so long. I know the longer it is the more people will just tend to skim, because I do that all the time. So I went back and refactored—er, rewrote all the somewhat tangential bits (wow these puns are too easy) into footnotes. Manually. Obviously if I have to do this again I’ll write a script for it. But the post is still really long, and I bet nobody will read the whole thing. Oh well.&lt;/p&gt;
&lt;p&gt;Life updates: I got out of the hospital Friday two-and-a-half weeks ago, went to the preliminaries of NPSC (a national team programming contest) with classmates, threw up a lot, went back into the hospital, and came out again. I wrote a lot of stuff about the experience and how much it sucked (hint: &lt;em&gt;a lot&lt;/em&gt;) when I started this draft around that time, but now putting so much detail in this post feels weird. I’m mostly good now.&lt;/p&gt;
&lt;p&gt;Three years ago NPSC was the only programming contest I really knew of; now I’ve participated in quite a few more, both online and locally, but it’s still the only contest I’ve entered that gives you real-time verdicts. I believe it inherits this from being modeled after ACM-ICPC, but that’s for college people and I’m less clear on how it works. All the other contests, namely &lt;a href=&#34;https://www.topcoder.com/&#34;&gt;TopCoder&lt;/a&gt;, &lt;a href=&#34;http://www.codeforces.com/&#34;&gt;CodeForces&lt;/a&gt;, &lt;a href=&#34;http://usaco.org/&#34;&gt;USACO&lt;/a&gt;, and the other local individual competition (there doesn’t appear to be an English name so for the purpose of this post I’ll just call it “Nameless Local”; there’s a nation-wide competition in one-and-a-half weeks!), have system tests after the contest that don’t allow you to resubmit afterwards.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; They all give pretests that you get to know about right away, just to catch super-silly non-algorithmic mistakes like failing to remove the debug statements or reading input from the wrong place, but these contain weak test cases and don’t guarantee that the solution will pass the system tests and get full score.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>