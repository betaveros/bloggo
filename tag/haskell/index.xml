<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>haskell on Bounded-Error Log</title>
    <link>//blog.vero.site/tag/haskell</link>
    <description>Recent content in haskell on Bounded-Error Log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Aug 2016 13:54:22 +0800</lastBuildDate>
    
	<atom:link href="//blog.vero.site/tag/haskell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>020315040524</title>
      <link>//blog.vero.site/post/bcodex</link>
      <pubDate>Mon, 08 Aug 2016 13:54:22 +0800</pubDate>
      
      <guid>//blog.vero.site/post/bcodex</guid>
      <description>&lt;p&gt;&lt;code&gtlt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gtlt;/code&gt; &lt;a href=&#34;https://github.com/betaveros/bcodex&#34;&gt;&lt;code&gt;...-- ...-- ...-- ....- ....- ----- ...-- ..... ...-- -.... ....- ----.&lt;/code&gt;&lt;/a&gt; &lt;code&gtlt;/code&gt; &lt;a href=&#34;http://betaveros.github.io/bcodex/&#34;&gt;&lt;code&gt;..--- .- ....- ----- ....- -.... ..--- ----- ...-- ....- ...-- ..--- ...-- ..-. ..--- ----- ....- ..... ....- ...-- ....- .- ..--- ----- ...-- .- ....- ..... ..--- ----- ...-- ----. ...-- -.... ....- ...-- ...-- -.... ..... -----&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Phone</title>
      <link>//blog.vero.site/post/phone</link>
      <pubDate>Wed, 15 Jul 2015 23:58:02 +0800</pubDate>
      
      <guid>//blog.vero.site/post/phone</guid>
      <description>&lt;p&gt;&lt;strong&gt;tl;dr: anybody want to add me on Line or tell/remind me about other phone chat apps? betaveros as always.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Wow, talk about uninspired post titles.&lt;/p&gt;
&lt;p&gt;I got a new phone today. Or, well, it’s second-hand, actually. I try to make electronics last a long time, but I think this was justified given the state of my last phone’s screen:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;//blog.vero.site/img/screen.jpg&#34;&gt;&lt;img src=&#34;//blog.vero.site/img/screen.jpg?w=269&#34; alt=&#34;old phone screen, with a visibly malfunctioning black patch&#34; width=&#34;269&#34; height=&#34;300&#34; class=&#34;aligncenter size-medium wp-image-3142&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Besides, I’m going off to college and all. Anyway, the phone is pretty cool. It’s a slick shade of red, it came with a cover and everything, and it has one of those fancy 3x3-grid locks. How secure are those again?&lt;/p&gt;
&lt;p&gt;Well, we could just &lt;a href=&#34;https://stackoverflow.com/questions/6979524/android-lock-password-combinations&#34;&gt;find the answer on StackOverflow&lt;/a&gt;, but that’s boring.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adventures in Cabal Installations</title>
      <link>//blog.vero.site/post/cabal</link>
      <pubDate>Sun, 13 Apr 2014 15:51:16 +0800</pubDate>
      
      <guid>//blog.vero.site/post/cabal</guid>
      <description>&lt;p&gt;First Google Code Jam!&lt;/p&gt;
&lt;p&gt;The format of this competition, allowing us to run programs on our own machines, brought up a very interesting issue for me: what programming language should I be using? (I had had similar considerations for IPSC 2013, but GCJ’s problems are closer to the traditional ACM-ICPC style.)&lt;/p&gt;
&lt;p&gt;The obvious choice is C++, the language I use for roughly every other competition, but its safety (or lack thereof) is not very appealing. I need speed, but not &lt;em&gt;that much&lt;/em&gt; speed. Unfortunately I still haven’t gotten around to learning any other friendlier mid-level languages (on the list: D, Go, or Rust), so I have no close substitutes for C++ right now.&lt;/p&gt;
&lt;p&gt;Python is certainly available for a reliable arbitrary-length integer type, if nothing else.&lt;/p&gt;
&lt;p&gt;As for non-candidates, Java has &lt;code&gt;BigInteger&lt;/code&gt; and memory safety, but all in all I decided the benefits are too minor and it’s too ugly without operator overloading. Scala is probably way too slow. So I don’t expect to be writing either language.&lt;/p&gt;
&lt;p&gt;The only difficult choice I have to make is, of course, Haskell — which can be quite fast, even while it’s ridiculously type-safe and expressive and referentially transparent and easy to reason about, once you’ve:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;figured out how to do the problem&lt;/li&gt;
&lt;li&gt;scrapped step 1 and &lt;em&gt;actually&lt;/em&gt; figured out how to do the problem &lt;em&gt;functionally&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;gotten the thing to compile&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even if I can handle step 1, step 2 is by no means a simple task, as my struggle to implement a mere &lt;a href=&#34;//blog.vero.site/post/haskell&#34;&gt;Sieve of Eratosthenes&lt;/a&gt; efficiently shows. That is fun, but not at all intuitive; I am doubtful I can do this under contest conditions. It is extremely difficult to transfer my skills in learning how to implement, say, a segment tree or treap into this language.&lt;/p&gt;
&lt;p&gt;But! Google links to the &lt;a href=&#34;http://www.go-hero.net/jam/10/round/0&#34;&gt;programming language breakdown for 2010 Qualification Round&lt;/a&gt; as an example, and much to my surprise, Haskell ranks somewhere between sixth and tenth place in popularity (depending on what you sort by), so there are functional superprogrammers who can presumably do something like this.&lt;/p&gt;
&lt;p&gt;As it happens, I ended up implementing all four solutions to the qualification rounds in Haskell, because of the relaxed time limit and lack of any involved algorithms and data structures. I think it was worth it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Haskell and Primes</title>
      <link>//blog.vero.site/post/haskell</link>
      <pubDate>Sat, 25 May 2013 23:03:05 +0800</pubDate>
      
      <guid>//blog.vero.site/post/haskell</guid>
      <description>&lt;blockquote&gt;
“I have been told that any encryption becomes safer if the underlying algorithm is maximally obscured, what is most conveniently done by coding it in Haskell.” – rankk
&lt;/blockquote&gt;
&lt;p&gt;Functional programming is terribly addicting! Partly I think the completely different way of thinking makes it feel like learning programming, and falling in love with it, all over again. Partly there’s this evil sense of satisfaction from using &lt;code&gt;$&lt;/code&gt;s (and later &lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt;s and &lt;code&gt;=&amp;lt;&amp;lt;&lt;/code&gt;s and &lt;code&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/code&gt;s) to improve readability for initiated Haskellers and worsen it for everybody else. Partly it’s because &lt;a href=&#34;http://learnyouahaskell.com/&#34;&gt;&lt;i&gt;Learn You a Haskell for Great Good!&lt;/i&gt;&lt;/a&gt; is such a fun read — there are too many funny bits to list but my favorite so far is when the author analyzes the first verse of Avril Lavigne’s &lt;em&gt;Girlfriend&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Although I think my code in Haskell tends to be more readable than in other languages, code obfuscation in Haskell is almost natural: all you have to do is refactor the wrong function to be “pointfree”, which means that even though it’s a function that takes arguments, you define it without parameters by manipulating and joining a bunch of other functions. Example (plus a few other tiny obfuscations):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;isPrime &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; liftA2 (&lt;span class=&#34;fu&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;) (liftA2 (&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;) (all &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; ((&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;) (&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;/=&lt;/span&gt;)) &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; rem) (flip&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;    takeWhile [&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;] &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; (flip (&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; liftA2 (&lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt;) id id) &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;&amp;gt;=&lt;/span&gt;))) ((&lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt;) &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;QQ wordpress why no Haskell highlighting &lt;ins&gt;(Editor’s note from 2017: The migration should highlight this now!)&lt;/ins&gt;&lt;/p&gt;
&lt;p&gt;Also, for some reason, you can do this in Haskell:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;ghci&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(via &lt;a href=&#34;http://www.yellosoft.us/evilgenius/&#34;&gt;Haskell for the Evil Genius&lt;/a&gt;)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Okay, but seriously now. I wrote this about my journey to learn functional programming in the &lt;a href=&#34;//blog.vero.site/post/programming&#34;&gt;programming babble post&lt;/a&gt; half a year ago:&lt;/p&gt;
&lt;blockquote&gt;
The main obstacle I have is that it’s hard to optimize or get asymptotics when computation is expensive (a big problem if you’re trying to learn through Project Euler problems, particularly ones with lots of primes).
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>